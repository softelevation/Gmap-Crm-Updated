{"version":3,"sources":["vendor/ZSDK.js","components/TableResults.tsx","components/SearchWidget.tsx","components/MapWidget.tsx","services/crmDataFetcher.ts","App.tsx","serviceWorker.js","index.js"],"names":["ZSDKUtil","GlobalLogger","QueryParams","GetQueryParams","ZLogger","mode","URL","qParams","window","location","href","substr","indexOf","split","forEach","ele","idx","miniSplit","hasOwnProperty","serviceOrigin","decodeURIComponent","prototype","Info","isDevMode","isLogEnabled","console","info","apply","arguments","Error","error","getLogger","Sleep","milliSeconds","startTime","Date","getTime","ZSDKMessageManager","SDKContext","AuthParentWindow","AuthParentOrigin","Logger","promiseIDCtr","PromiseQueue","RegExp","MessageHandler","MessageEvent","data","JSON","parse","e","messageType","type","eventName","MEvent","incomingSource","source","incomingOrigin","origin","isAppRegistered","isAuthorizedMessage","payload","eventHandler","SET_CONTEXT","HandleSetContext","UPDATE_CONTEXT","HandleUpdateContext","EVENT_RESPONSE","HandleEventResponse","EVENT_RESPONSE_FAILURE","HandleEventFailure","ZSDKEventManager","NotifyEventListeners","AppContext","HandleCustomEvent","HandleEvent","MessageInterceptor","stack","parent","SetContext","ExecuteLoadHandler","HandlePromiseCallback","promiseid","promiseID","isSuccess","response","resolve","reject","undefined","getNextPromiseID","AddToPromiseQueue","Promise","time","PostMessage","appOrigin","encodeURIComponent","getCurrentURLPath","postMessage","protocol","host","pathname","Init","ctx","config","bind","RegisterApp","registerSDKClient","DERegisterApp","uniqueID","getUniqueID","SendRequest","options","isPromiseEvent","PromiseID","SendEvent","TriggerEvent","EventListeners","AttachEventListener","fn","Array","isArray","push","eventData","internalEventCheck","match","bindedListeners","length","i","call","NotifyInternalEventHandler","UpdateContext","ExecuteContextUpdateHandler","ZSDK","that","this","AppCode","ContextUpdateHandler","connectors","paramsObj","localeResource","version","_isAppRegistered","isOnLoadTriggered","isContextReady","HelperContext","getContext","GetRequest","isPromise","RegisterClient","contextData","modelData","model","locale","Object","keys","constructor","LoadLocaleResource","ZSDKModelManager","key","AddModel","Model","GetModelStore","eventHandlerFn","GetConnectors","_loadJSON","InitI18n","filepath","callback","xobj","XMLHttpRequest","open","onreadystatechange","readyState","status","responseText","send","Translate","valStr","_getKeyByString","translateOptions","stringify","eval","keysArr","_replaceString","str","find","replace","$r","o","s","a","n","k","all","document","querySelectorAll","getAttribute","hasAttribute","innerHTML","Bootstrap","addEventListener","Event","Listen","Trigger","OnLoad","AppLoadHandler","OnUnLoad","AppUnLoadHandler","OnContextUpdate","AppCtxUpdateHandler","ZOHO","appSDK","initPromise","eventListenerMap","isInitTriggered","embeddedApp","on","event","init","promiseResolve","CRM","newRequestPromise","sdkVersion","createNewFileObj","file","oldfile","File","name","createRecord","Entity","APIdata","RecordID","RelatedEntity","FileData","newfileObj","category","RelatedID","APIData","getBluePrint","getAllActions","remoteCall","method","requestData","FILE","newfileobj","reqData","url","params","headers","body","Parts","PARTS","partBoundary","PART_BOUNDARY","ContentType","CONTENT_TYPE","responseType","RESPONSE_TYPE","Message","queryString","array","join","constructQueryString","Header","Body","PARTS_BOUNDARY","nameSpace","manipulateUI","$","action","obj","object","user","promiseData","ID","Type","page","per_page","getMeta","Id","HTTPRequest","ACTION","setConfig","enableAccountAccess","FUNCTIONS","execute","func_name","req_data","request","auth_type","customFunctionName","CONFIG","getOrgInfo","getCurrentUser","GetCurrentEnvironment","META","getFields","getModules","getAssignmentRules","getLayouts","id","LayoutId","getRelatedList","getCustomViews","API","addNotes","Note_Title","Title","Note_Content","Content","addNotesAttachment","RelatedRecordID","updateNotes","Files","FileName","Name","insertRecord","trigger","upsertRecord","duplicate_check_fields","getRecord","recordID","relatedListSysRef","RelatedList","updateBluePrint","BlueprintData","uploadFile","getFile","getAllRecords","updateRecord","deleteRecord","searchRecord","Query","delay","getApprovalRecords","newdata","getApprovalById","getApprovalsHistory","approveRecord","getAllUsers","getUser","getRelatedRecords","updateRelatedRecords","updateRelatedRecord","delinkRelatedRecord","deleteRelatedRecord","attachFile","getAllProfiles","getProfile","Category","updateProfile","getOrgVariable","UI","Resize","width","height","Dialer","maximize","telephony","minimize","notify","Record","record","target","Target","edit","create","populate","recordData","Popup","close","popup","closeReload","Widget","webTab","HTTP","get","post","put","patch","delete","CONNECTOR","invokeAPI","authorize","CONNECTION","invoke","conn_name","reqObj","param_type","parameters","connectionName","TableResults","page_size","page_number","results","useState","setPage","style","padding","slice","map","item","index","phoneNumber","Availability","Base_Rate","distance","text","duration","marginBottom","marginRight","onClick","SearchWidget","changeSearchParameters","Street","City","State","Zip","chosenSearchAddress","changeSearchAddress","className","value","required","onChange","newObj","maxLength","toUpperCase","preventDefault","searchAddress","readyForSearch","MapWidget","mapsApiKey","setResultsSortedByDistance","resultsSortedByDistance","latitude","longitude","centrePoint","setCentrePoint","destinations","setDestinations","useEffect","addressesToRender","destinationsAddresses","address","googleMapsApiKey","center","lat","lng","zoom","mapContainerStyle","origins","travelMode","unitSystem","rows","elements","sortBy","compact","position","label","toString","getGoogleMapsApiKeyFromCRM","googleMapsAPIKey","includes","alert","Success","getRecords","pageNum","more","dataArr","log","Latitude","Longitude","parseFloat","Phone","more_records","filterRecordsByDistance","coordinates","records","sortedRecordsByDistance","orderByDistance","getAddressGeocode","apiKey","fetch","res","json","geometry","msg","App","searchParameters","updateResults","updateGoogleMapsApiKey","localStorage","setItem","getRecordsAPI","geocode","getItem","parsedRecords","sortedByDistance","getDataFromCrm","getMapsApiKeyFromCRM","renderResultsWidget","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7c067e59.chunk.js","sourcesContent":["/* eslint-disable */\nimport * as $ from 'jquery'\n\nconst ZSDKUtil = (function (ZSDKUtil) {\n    const QueryParams = GetQueryParams()\n\n    // Global Logger instance which will be acquired and shared by other modules.\n    let GlobalLogger\n\n    // minimal Logging utility.\n    function ZLogger (mode) {}\n    ZLogger.prototype.Info = function () {\n        if (ZSDKUtil.isDevMode() || ZSDKUtil.isLogEnabled()) {\n            window.console.info.apply(null, arguments)\n        }\n    }\n    ZLogger.prototype.Error = function () {\n        if (ZSDKUtil.isDevMode() || ZSDKUtil.isLogEnabled()) {\n            window.console.error.apply(null, arguments)\n        }\n    }\n    function getLogger () {\n        if (!GlobalLogger || !(GlobalLogger instanceof ZLogger)) {\n            GlobalLogger = new ZLogger() // Logging instance for Core Framework\n        }\n\n        return GlobalLogger\n    }\n\n    function GetQueryParams (URL) {\n    // TODO: Handle hash case too.\n        const qParams = {}\n        URL = URL || window.location.href\n        const splittedParams = URL.substr(URL.indexOf('?') + 1).split('&')\n        splittedParams.forEach(function (ele, idx) {\n            const miniSplit = ele.split('=')\n            qParams[miniSplit[0]] = miniSplit[1]\n        })\n\n        // decoding serviceOrigin URL\n        if (qParams.hasOwnProperty('serviceOrigin')) {\n            qParams.serviceOrigin = decodeURIComponent(qParams.serviceOrigin)\n        }\n\n        return qParams\n    }\n    function isDevMode () {\n        return QueryParams && QueryParams.isDevMode\n    }\n    function isLogEnabled () {\n        return QueryParams && QueryParams.isLogEnabled\n    }\n\n    // Sleep\n    function Sleep (milliSeconds) {\n        const startTime = new Date().getTime()\n        while ((startTime + milliSeconds) > new Date().getTime()) {}\n    }\n    ZSDKUtil.GetQueryParams = GetQueryParams\n    ZSDKUtil.isDevMode = isDevMode\n    ZSDKUtil.isLogEnabled = isLogEnabled\n    ZSDKUtil.getLogger = getLogger\n    ZSDKUtil.Sleep = Sleep\n\n    return ZSDKUtil\n})(window.ZSDKUtil || {})\n\nconst ZSDKMessageManager = (function (ZSDKMessageManager) {\n    let SDKContext\n    const Logger = ZSDKUtil.getLogger()\n    const defaultPromiseTimeout = 10000 // Promise timeout\n    let promiseIDCtr = 100\n    const PromiseQueue = {} // Queue holding all the GetRequest promises\n\n    const AllowedOrigins = new RegExp('^https?:\\/\\/[a-zA-Z0-9-_]*.(sandbox.crm-oem.com|csez.zohocorpin.com|zoho.com|zoho.eu|zohoplatform.com|zohosandbox.com)(:[0-9]{0,4})?$')\n\n    let AuthParentWindow; let AuthParentOrigin\n\n    function Init (ctx, config) { // Config is for future use\n        if (!ctx || typeof ctx !== 'object') {\n            throw Error('Invalid Context object passed')\n        }\n        if (config && typeof config !== 'object') {\n            throw Error('Invalid Configuration Passed to MessageManager')\n        }\n\n        SDKContext = ctx\n\n        return MessageHandler.bind(ZSDKMessageManager)\n    }\n\n    // Authorization Check in SDK side.\n    function isAuthorizedMessage (MEvent) {\n        const incomingSource = MEvent.source\n        const incomingOrigin = MEvent.origin\n\n        if (SDKContext.isAppRegistered() && AuthParentWindow === incomingSource && AuthParentOrigin === incomingOrigin) {\n            return true\n        }\n\n        return new Error('Un-Authorized Message.')\n    }\n    function MessageHandler (MessageEvent) {\n    /* Added for backward compatibility support */\n        try {\n            var data = typeof MessageEvent.data === 'string' ? JSON.parse(MessageEvent.data) : MessageEvent.data\n        } catch (e) {\n            var data = MessageEvent.data\n        }\n        const messageType = data.type\n        const eventName = data.eventName\n\n        try {\n            if (eventName === 'SET_CONTEXT' || isAuthorizedMessage(MessageEvent)) {\n                switch (messageType) {\n                case 'FRAMEWORK.EVENT':\n                    HandleEvent(MessageEvent, data)\n                    break\n\n                default:\n                    SDKContext.MessageInterceptor(MessageEvent, data) // Future Use.\n                    break\n                }\n            }\n        } catch (e) {\n            Logger.Error('[SDK.MessageHandler] => ', e.stack)\n        }\n    }\n\n    function HandleEvent (MessageEvent, payload) {\n        const data = payload.data\n        const eventName = payload.eventName\n\n        const eventHandlers = {\n            SET_CONTEXT: HandleSetContext,\n            UPDATE_CONTEXT: HandleUpdateContext,\n            EVENT_RESPONSE: HandleEventResponse,\n            EVENT_RESPONSE_FAILURE: HandleEventFailure\n        }\n\n        const eventHandler = eventHandlers[eventName]\n        if (eventHandler && typeof eventHandler === 'function') {\n            eventHandler(MessageEvent, payload)\n        } else {\n            HandleCustomEvent(MessageEvent, payload)\n        }\n    }\n    function HandleSetContext (MessageEvent, payload) {\n        const parentOrigin = MessageEvent.origin\n        AuthParentWindow = window.parent // MessageEvent.source;\n        AuthParentOrigin = SDKContext.QueryParams.serviceOrigin // parentOrigin;\n\n        SDKContext.SetContext(payload.data)\n        SDKContext.ExecuteLoadHandler()\n    }\n    function HandleUpdateContext (MessageEvent, payload) {\n    // SDKContext.UpdateContext(payload.data);\n    // SDKContext.ExecuteLoadHandler();\n    }\n    function HandleCustomEvent (MessageEvent, payload) {\n        ZSDKEventManager.NotifyEventListeners(SDKContext.AppContext, payload.eventName, payload.data)\n    }\n\n    function HandleEventResponse (MessageEvent, payload) {\n        const promiseID = payload.promiseid\n        const response = payload.data\n        HandlePromiseCallback(promiseID, true, response)\n    }\n    function HandleEventFailure (MessageEvent, payload) {\n        const promiseID = payload.promiseid\n        const response = payload.data\n        HandlePromiseCallback(promiseID, false, response)\n    }\n    function HandlePromiseCallback (promiseID, isSuccess, response) {\n        if (PromiseQueue.hasOwnProperty(promiseID)) {\n            if (isSuccess) {\n                PromiseQueue[promiseID].resolve(response)\n            } else {\n                PromiseQueue[promiseID].reject(response)\n            }\n\n            PromiseQueue[promiseID] = undefined\n            delete PromiseQueue[promiseID]\n        } else {\n            // TODO: Handle if there is no promiseID present\n        }\n    }\n    function SendRequest (options) {\n        if (!options || typeof options !== 'object') {\n            throw new Error('Invalid Options passed')\n        }\n\n        return SendEvent('HTTP_REQUEST', options, true)\n    }\n    function TriggerEvent (eventName, payload, isPromiseEvent) {\n        if (!eventName) {\n            throw new Error('Invalid Eventname : ', eventName)\n        }\n\n        const PromiseID = isPromiseEvent ? getNextPromiseID() : undefined\n        const eventObject = {\n            /* Default Event Props */\n            type: 'SDK.EVENT',\n            eventName: eventName,\n            uniqueID: SDKContext.getUniqueID(),\n            time: new Date().getTime(),\n            promiseid: PromiseID,\n\n            /* User data */\n            data: payload\n        }\n\n        PostMessage(eventObject)\n\n        if (isPromiseEvent) {\n            return AddToPromiseQueue(PromiseID)\n        }\n    }\n\n    // Sends the event to the Framework.\n    function SendEvent (eventName, payload, isPromiseEvent) {\n        if (!eventName) {\n            throw new Error('Invalid Eventname : ', eventName)\n        }\n\n        const PromiseID = isPromiseEvent ? getNextPromiseID() : undefined\n        const eventObject = {\n            /* Default Event Props */\n            type: 'SDK.EVENT',\n            eventName: eventName,\n            uniqueID: SDKContext.getUniqueID(),\n            time: new Date().getTime(),\n            promiseid: PromiseID,\n\n            /* User data */\n            data: payload\n        }\n\n        PostMessage(eventObject)\n\n        if (isPromiseEvent) {\n            return AddToPromiseQueue(PromiseID)\n        }\n    }\n    function getNextPromiseID () {\n        return 'Promise' + promiseIDCtr++\n    }\n    function AddToPromiseQueue (promiseID) {\n        const promise = new Promise(function (resolve, reject) {\n            // Adding the promise to queue.\n            PromiseQueue[promiseID] = {\n                resolve: resolve,\n                reject: reject,\n                time: new Date().getTime()\n            }\n        })\n\n        /*\n     * Currently the Timeout case is disabled. Need to revisit.\n    setTimeout(function () {\n      if (PromiseQueue.hasOwnProperty(PromiseId)) {\n\n        PromiseQueue[PromiseId].reject('timeout'); // TODO: Better timeout message.\n        delete PromiseQueue[PromiseId];\n\n      }\n    }, defaultPromiseTimeout); // Have to define as common config props\n    */\n\n        return promise\n    }\n\n    function RegisterApp () {\n        const registerSDKClient = {\n            type: 'SDK.EVENT',\n            eventName: 'REGISTER',\n            appOrigin: encodeURIComponent(getCurrentURLPath())\n        }\n\n        // Initiating the Client Handshake\n        window.parent.postMessage(registerSDKClient, SDKContext.QueryParams.serviceOrigin)\n    }\n    function DERegisterApp () {\n        const deRegisterSDKClient = {\n            type: 'SDK.EVENT',\n            eventName: 'DEREGISTER',\n            uniqueID: SDKContext.getUniqueID()\n        }\n\n        PostMessage(deRegisterSDKClient)\n    }\n\n    // Helpers\n    function PostMessage (data) {\n        if (typeof data === 'object') {\n            data.appOrigin = encodeURIComponent(getCurrentURLPath())\n        }\n\n        if (!AuthParentWindow) {\n            throw new Error('Parentwindow reference not found.')\n        }\n        AuthParentWindow.postMessage(data, SDKContext.QueryParams.serviceOrigin)\n    }\n    function getCurrentURLPath () {\n        return window.location.protocol + '//' + window.location.host + window.location.pathname\n    }\n    ZSDKMessageManager.Init = Init\n    ZSDKMessageManager.RegisterApp = RegisterApp\n    ZSDKMessageManager.DERegisterApp = DERegisterApp\n\n    ZSDKMessageManager.SendRequest = SendRequest\n    ZSDKMessageManager.TriggerEvent = TriggerEvent\n\n    return ZSDKMessageManager\n})(window.ZSDKMessageManager || {})\n\nvar ZSDKEventManager = (function (ZSDKEventManager) {\n    const Logger = ZSDKUtil.getLogger()\n    // Private var's\n    const EventListeners = {} // Map storing all the eventnames and their Listeners\n\n    // Public API's\n    function AttachEventListener (eventName, fn) {\n        if (typeof fn !== 'function') {\n            // TODO: Using Logger log an error message as invalid params passed. fn is expected.\n            return\n        }\n\n        if (!Array.isArray(EventListeners[eventName])) {\n            EventListeners[eventName] = []\n        }\n        EventListeners[eventName].push(fn)\n    }\n\n    function NotifyEventListeners (AppContext, eventName, eventData) {\n        const internalEventCheck = eventName.match(/^\\__[A-Za-z_]+\\__$/gi)\n        const isInternalEvent = Array.isArray(internalEventCheck) && internalEventCheck.length > 0\n\n        const bindedListeners = EventListeners[eventName]\n        if (bindedListeners && Array.isArray(bindedListeners)) {\n            for (let i = 0; i < bindedListeners.length; i++) {\n                const fn = bindedListeners[i]\n                fn.call(AppContext, eventData)\n            }\n        } else {\n            Logger.Info('Cannot find EventListeners for Event : ', eventName)\n        }\n    }\n\n    function NotifyInternalEventHandler (SDKContext, payload) {\n        const eventName = payload.eventName\n\n        if (eventName === '__APP_INIT__') {\n            SDKContext.SetContext(payload.data)\n            SDKContext.ExecuteLoadHandler()\n        } else if (eventName === '__APP_CONTEXT_UPDATE__') {\n            SDKContext.UpdateContext(payload.data)\n            SDKContext.ExecuteContextUpdateHandler()\n        }\n    }\n\n    ZSDKEventManager.AttachEventListener = AttachEventListener\n    ZSDKEventManager.NotifyEventListeners = NotifyEventListeners\n    ZSDKEventManager.NotifyInternalEventHandler = NotifyInternalEventHandler\n\n    return ZSDKEventManager\n})(window.ZSDKEventManager || {})\n\nfunction ZSDK () { // TODO: Replace console with Logger\n    /* Private variables */\n    const that = this\n    let AppCode // Fn which gets executed on OnLoad\n    let ContextUpdateHandler // Fn which executed on OnContextUpdate\n    let connectors\n    let QueryParams\n    let uniqueID\n    const paramsObj = {} // TODO: Pass params from Framework to patchString in API Request call\n    let localeResource = {}\n\n    const version = '0.7.0' // Version\n\n    const Logger = ZSDKUtil.getLogger()\n\n    let _isAppRegistered = false\n    let isOnLoadTriggered = false\n\n    /* Instance variables */\n    this.isContextReady = false\n    this.HelperContext = {} // Helper context for helper js files\n    this.isDevMode = false\n    this.getContext = function () {\n        return AppContext\n    }\n\n    var AppContext = {} // App context having all the\n\n    AppContext.Model = {} // Modeldata store\n\n    AppContext.Event = {} // Event API's\n    AppContext.Event.Listen = AttachEventListener\n    AppContext.Event.Trigger = TriggerEvent // TODO: Need to check with API name and handler mechanism.\n\n    AppContext.GetRequest = GetRequest\n    AppContext.QueryParams = QueryParams\n    AppContext.Translate = Translate\n\n    this.OnLoad = function (AppLoadHandler) {\n        // TODO: Have to check whether AppCode has been executed. Throw Error when trying to Again bind fn to Init.\n        if (typeof AppLoadHandler !== 'function') {\n            throw new Error('Invalid Function value is passed')\n        }\n        AppCode = AppLoadHandler\n        if (_isAppRegistered) { ExecuteLoadHandler() }\n    }\n    this.OnUnLoad = function (AppUnLoadHandler) {\n    // TODO: Yet to impl\n    }\n    this.OnContextUpdate = function (AppCtxUpdateHandler) {\n    // TODO: Yet to impl\n        ContextUpdateHandler = AppCtxUpdateHandler\n    }\n\n    function ExecuteLoadHandler () {\n        if (typeof AppCode !== 'function') { Logger.Error('No OnLoad Handler provided to execute.'); return }\n        if (isOnLoadTriggered) { Logger.Error('OnLoad event already triggered.'); return }\n\n        AppCode.call(AppContext, AppContext)\n        isOnLoadTriggered = true\n    }\n    function ExecuteContextUpdateHandler () {\n        ContextUpdateHandler.call(AppContext, AppContext)\n    }\n    function isAppRegistered () {\n        return _isAppRegistered\n    }\n\n    // TODO: Add support for Setting custom headers and other error handling cases.\n    function GetRequest (options) {\n        return ZSDKMessageManager.SendRequest(options)\n    }\n\n    // TODO: Need to revisit\n    function TriggerEvent (eventName, payload, isPromise) {\n        return ZSDKMessageManager.TriggerEvent(eventName, payload, isPromise)\n    }\n    function RegisterClient () {\n        ZSDKMessageManager.RegisterApp()\n    }\n\n    // LoadContext object\n    function SetContext (contextData) {\n        Logger.Info('Setting AppContext data')\n\n        const modelData = (contextData && contextData.model) || {}\n        const local = contextData && contextData.locale\n        const localResource = contextData && contextData.localeResource\n\n        if (window.isDevMode) {\n            if (contextData.locale && contextData.localeResource &&\n          Object.keys(contextData.localeResource).length === 0 &&\n          contextData.localeResource.constructor === Object) {\n                if (contextData.locale) {\n                    LoadLocaleResource(contextData.locale)\n                }\n            }\n        }\n\n        if (typeof ZSDKModelManager !== 'undefined') { // No I18n\n            for (const key in modelData) {\n                window.ZSDKModelManager.AddModel(key, modelData[key])\n            }\n            AppContext.Model = window.ZSDKModelManager.GetModelStore()\n        }\n\n        // Setting the uniqueID\n        uniqueID = contextData.uniqueID\n\n        // TODO: Need to check wheather needed or move to respective place.\n        connectors = contextData.connectors\n        Logger.Info('App Connectors ', connectors)\n\n        _isAppRegistered = true\n    }\n    function getUniqueID () {\n        return uniqueID\n    }\n    function UpdateContext (contextData) {\n    // Logger.Info('Context Update Event Data ', contextData);\n    }\n    function AttachEventListener (eventName, eventHandlerFn) {\n        ZSDKEventManager.AttachEventListener(eventName, eventHandlerFn)\n    }\n\n    function GetConnectors () {\n        return connectors\n    }\n\n    function LoadLocaleResource (locale) {\n        _loadJSON('/app-translations/' + locale + '.json', function (response) {\n            // Parse JSON string into object\n            localeResource = JSON.parse(response)\n            InitI18n()\n        })\n    }\n\n    function _loadJSON (filepath, callback) {\n        const xobj = new XMLHttpRequest()\n        // xobj.overrideMimeType(\"application/json\");\n        xobj.open('GET', filepath, false) // make 3rd param true for asynchronous mode\n        xobj.onreadystatechange = function () {\n            if (xobj.readyState == 4 && xobj.status == '200') {\n                // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode\n                callback(xobj.responseText)\n            }\n        }\n\n        xobj.send(null)\n    }\n\n    function Translate (key, options) {\n        let valStr = ''\n        if (key) {\n            valStr = _getKeyByString(localeResource, key)\n        }\n\n        if (!valStr) {\n            return false\n        }\n\n        if (options) {\n            var key\n            const translateOptions = JSON.parse(JSON.stringify(eval(options)))\n            const keysArr = Object.keys(translateOptions)\n            for (key in keysArr) {\n                valStr = _replaceString(valStr, '${' + keysArr[key] + '}', translateOptions[keysArr[key]])\n            }\n        }\n\n        return valStr\n    }\n\n    function _replaceString (str, find, replace) {\n        let $r = ''\n        while ($r != str) {\n            $r = str\n            str = str.replace(find, replace)\n        }\n        return str\n    }\n\n    function _getKeyByString (o, s) {\n        s = s.replace(/\\[(\\w+)\\]/g, '.$1') // convert indexes to properties\n        s = s.replace(/^\\./, '') // strip a leading dot\n        const a = s.split('.')\n        for (let i = 0, n = a.length; i < n; ++i) {\n            const k = a[i]\n            if (k in o) {\n                o = o[k]\n            } else {\n                return\n            }\n        }\n        return o\n    }\n\n    function InitI18n () {\n        const all = document.querySelectorAll('[data-i18n]')\n        for (const i in all) {\n            if (all.hasOwnProperty(i)) {\n                let valStr = _getKeyByString(localeResource, all[i].getAttribute('data-i18n'))\n                if (!valStr) {\n                    return false\n                }\n\n                if (all[i].hasAttribute('data-options')) {\n                    const options = JSON.parse(JSON.stringify(eval('(' + all[i].getAttribute('data-options') + ')')))\n                    const keysArr = Object.keys(options)\n                    var key\n                    for (key in keysArr) {\n                        valStr = _replaceString(valStr, '${' + keysArr[key] + '}', options[keysArr[key]])\n                    }\n                }\n                all[i].innerHTML = valStr\n            }\n        }\n    }\n\n    function Bootstrap () {\n        QueryParams = ZSDKUtil.GetQueryParams()\n\n        // Intialize variables\n        window.isDevMode = !!QueryParams.isDevMode\n\n        const SDKContext = {}\n        SDKContext.isDevMode = window.isDevMode\n        SDKContext.ExecuteLoadHandler = ExecuteLoadHandler\n        SDKContext.SetContext = SetContext\n        SDKContext.UpdateContext = UpdateContext\n        SDKContext.QueryParams = QueryParams\n        SDKContext.GetConnectors = GetConnectors\n        SDKContext.TriggerEvent = TriggerEvent\n        SDKContext.ExecuteContextUpdateHandler = ExecuteContextUpdateHandler\n        SDKContext.getUniqueID = getUniqueID\n        SDKContext.isAppRegistered = isAppRegistered\n\n        // Initiating Message Manager\n        const MessageHandler = ZSDKMessageManager.Init(SDKContext)\n        window.addEventListener('message', MessageHandler)\n        window.addEventListener('unload', function () {\n            ZSDKMessageManager.DERegisterApp()\n        })\n\n        if (typeof ZSDKModelManager !== 'undefined') {\n            window.ZSDKModelManager.Init(SDKContext)\n        }\n\n        RegisterClient()\n    }\n\n    Bootstrap() // Bootstrap for SDK\n}\n\nexport const ZOHO = (function () {\n    let appSDK\n    const eventListenerMap = {}\n    let isInitTriggered = false\n    let initPromise\n    return {\n        embeddedApp: {\n            on: function (event, fn) {\n                eventListenerMap[event] = fn\n            },\n            init: function () {\n            \tif (!isInitTriggered) {\n            \t\tisInitTriggered = true\n                    appSDK = new ZSDK()\n                    let promiseResolve\n                    initPromise = new Promise(function (resolve, reject) {\n                        promiseResolve = resolve\n                    })\n                    appSDK.OnLoad(function () {\n                        promiseResolve()\n                    })\n                    for (const key in eventListenerMap) {\n                        appSDK.getContext().Event.Listen(key, eventListenerMap[key])\n                    }\n            \t}\n                return initPromise\n            }\n        },\n        CRM: (function () {\n            function newRequestPromise (data) {\n                /*\n                 * Sdk Version Maintainance\n                 */\n                data.sdkVersion = '1'\n                return appSDK.getContext().Event.Trigger('CRM_EVENT', data, true)\n            }\n            // file upload issue fie\n            function createNewFileObj (file) {\n                const oldfile = file\n                const newfile = new File([oldfile], oldfile.name, { type: oldfile.type })\n\t         \treturn newfile\n            }\n            function createRecord (Entity, APIdata, RecordID, RelatedEntity) {\n            \tif (APIdata.FileData) {\n            \t  const newfileObj = createNewFileObj(APIdata.FileData)\n                    APIdata.FileData = newfileObj\n                }\n                const data = {\n                    category: 'CREATE', // no i18n\n                    Entity: Entity,\n                    RelatedID: RecordID,\n                    APIData: APIdata\n                }\n                data.type = RelatedEntity || 'RECORD'\n                return newRequestPromise(data)\n            }\n\n            function getRecord (Entity, recordID, relatedListSysRef) {\n                const data = {\n                    category: 'READ', // no i18n\n                    APIData: {\n                        Entity: Entity,\n                        RecordID: recordID,\n                        RelatedList: relatedListSysRef\n                    }\n                }\n                return newRequestPromise(data)\n            }\n            function getBluePrint (APIData) {\n                APIData.category = 'BLUEPRINT' // no i18n\n                return newRequestPromise(APIData)\n            }\n            function uploadFile (APIData) {\n            \tif (APIData.FILE) {\n            \t\tconst newfileobj = createNewFileObj(APIData.FILE.file)\n            \t\tAPIData.FILE.file = newfileobj\n        \t\t}\n                const data = {\n                    FileData: APIData,\n                    category: 'FILES', // no i18n\n                    type: 'UPLOAD_FILE'\n                }\n                return newRequestPromise(data)\n            }\n            function getFile (APIData) {\n                APIData.category = 'FILES'\n                APIData.type = 'DOWNLOAD_FILE'\n                return newRequestPromise(APIData)\n            }\n            function getAllActions (APIData) {\n                APIData.category = 'APPROVALS'\n                return newRequestPromise(APIData)\n            }\n            function getAllRecords (APIData) {\n                const data = {\n                    category: 'READ',\n                    APIData: APIData\n                }\n                return newRequestPromise(data)\n            }\n\n            function updateRecord (Entity, APIData) {\n                const data = {\n                    category: 'UPDATE', // no i18n\n                    type: 'RECORD', // no i18n\n                    Entity: Entity,\n                    APIData: APIData\n                }\n                return newRequestPromise(data)\n            }\n\n            function getRelatedRecord (APIData) {\n                const data = {\n                    category: 'READ', // no i18n\n                    APIData: APIData // no i18n\n                }\n                return newRequestPromise(data)\n            }\n\n            function updateRelatedRecord (Entity, RecordID, RelatedList, RelatedRecordID, APIData) {\n                const data = {\n                    category: 'UPDATE', // no i18n\n                    type: 'RELATED_RECORD', // no i18n\n                    Entity: Entity,\n                    RecordID: RecordID,\n                    RelatedList: RelatedList,\n                    RelatedRecordID: RelatedRecordID,\n                    APIData: APIData\n                }\n                return newRequestPromise(data)\n            }\n\n            function updateNotes (Entity, RecordID, RelatedRecordID, APIData) {\n                const data = {\n                    category: 'UPDATE', // no i18n\n                    type: 'NOTES', // no i18n\n                    Entity: Entity,\n                    RecordID: RecordID,\n                    RelatedRecordID: RelatedRecordID,\n                    APIData: APIData\n                }\n                return newRequestPromise(data)\n            }\n\n            function deleteRecord (Entity, RecordID) {\n                const data = {\n                    category: 'DELETE', // no i18n\n                    type: 'RECORD', // no i18n\n                    Entity: Entity,\n                    RecordID: RecordID\n                }\n                return newRequestPromise(data)\n            }\n\n            function deleteRelatedRecord (Entity, RecordID, RelatedList, RelatedRecordID) {\n                const data = {\n                    category: 'DELETE', // no i18n\n                    type: 'RELATED_RECORD', // no i18n\n                    Entity: Entity,\n                    RecordID: RecordID,\n                    RelatedList: RelatedList,\n                    RelatedRecordID: RelatedRecordID\n                }\n                return newRequestPromise(data)\n            }\n\n            function searchRecord (Entity, Type, Query, page, per_page, delay) {\n                const data = {\n                    category: 'SEARCH', // no i18n\n                    Entity: Entity,\n                    Type: Type,\n                    Query: Query,\n                    page: page,\n                    per_page: per_page,\n                    delay: delay\n                }\n                return newRequestPromise(data)\n            }\n\n            function getAllProfiles (Category, Type) {\n                const data = {\n                    category: Category,\n                    type: Type\n                }\n                return newRequestPromise(data)\n            }\n\n            function getProfile (Category, Type, ID) {\n                const data = {\n                    category: Category,\n                    type: Type,\n                    ID: ID\n                }\n                return newRequestPromise(data)\n            }\n\n            function updateProfile (Category, Type, ID, APIData) {\n                const data = {\n                    category: Category,\n                    type: Type,\n                    ID: ID,\n                    APIData: APIData\n                }\n                return newRequestPromise(data)\n            }\n\n            function constructQueryString (source) {\n                const array = []\n\n                for (const key in source) {\n                    array.push(encodeURIComponent(key) + '=' + encodeURIComponent(source[key]))\n                }\n                return array.join('&')\n            }\n\n            function remoteCall (method, requestData, type) {\n            \tif (requestData.FILE) {\n            \t\tconst newfileobj = createNewFileObj(requestData.FILE.file)\n            \t\trequestData.FILE.file = newfileobj\n        \t\t}\n                let reqData\n                if (!type) {\n                    let url = requestData.url\n                    const params = requestData.params\n                    const headers = requestData.headers\n                    const body = requestData.body\n                    const Parts = requestData.PARTS\n                    const partBoundary = requestData.PART_BOUNDARY\n                    const ContentType = requestData.CONTENT_TYPE\n                    const responseType = requestData.RESPONSE_TYPE\n                    const file = requestData.FILE\n                    if (!url) {\n                        throw { Message: 'Url missing' }\n                    }\n                    if (params) {\n                        const queryString = constructQueryString(params)\n                        url += (url.indexOf('?') > -1 ? '&' : '?') + queryString\n                    }\n                    reqData = {\n                        url: url,\n                        Header: headers,\n                        Body: body,\n                        CONTENT_TYPE: ContentType,\n                        RESPONSE_TYPE: responseType,\n                        PARTS: Parts,\n                        PARTS_BOUNDARY: partBoundary,\n                        FILE: file\n                    }\n                } else {\n                    reqData = requestData\n                }\n\n                const data = {\n                    category: 'CONNECTOR', // no i18n\n                    nameSpace: method,\n                    data: reqData,\n                    type: type\n                }\n                return newRequestPromise(data)\n            }\n\n            function manipulateUI (data) {\n                const config = {\n                    category: 'UI'\n                }\n                $.extend(data, config)\n                return newRequestPromise(data)\n            }\n\n            function config (type, nameSpace, requestData) {\n                const data = {\n                    category: 'CONFIG',\n                    type: type,\n                    nameSpace: nameSpace,\n                    APIData: requestData\n                }\n                return newRequestPromise(data)\n            }\n\n            function action (type, obj) {\n                const data = {\n                    category: 'ACTION',\n                    type: type,\n                    object: obj\n                }\n                return newRequestPromise(data)\n            }\n\n            function user (data) {\n                const promiseData = {\n                    category: 'USER'\n                }\n                if (data.ID) {\n                    promiseData.ID = data.ID\n                } else if (data.Type) {\n                    promiseData.Type = data.Type\n                    if (data.page) {\n                        promiseData.page = data.page\n                    }\n                    if (data.per_page) {\n                        promiseData.per_page = data.per_page\n                    }\n                }\n                return newRequestPromise(promiseData)\n            }\n\n            function getMeta (data) {\n                const reqJson = {\n                    category: 'META',\n                    type: data.type,\n                    Entity: data.Entity,\n                    Id: data.Id\n                }\n                return newRequestPromise(reqJson)\n            }\n            const HTTPRequest = {\n                POST: 'wget.post',\n                GET: 'wget.get',\n                PUT: 'wget.put',\n                PATCH: 'wget.patch',\n                DELETE: 'wget.delete'\n            }\n            return {\n                ACTION: {\n                    setConfig: function (obj) {\n                        return action('CUSTOM_ACTION_SAVE_CONFIG', obj)\n                    },\n                    enableAccountAccess: function (obj) {\n                        return action('ENABLE_ACCOUNT_ACCESS', obj)\n                    }\n                },\n                /**\n                 * @namespace ZOHO.CRM.FUNCTIONS\n                 */\n                FUNCTIONS: {\n                    /**\n                     * @function execute\n                     * @description Invoke a Function\n                     * @returns {Promise} resolved with response of the function executed\n                     * @memberof ZOHO.CRM.FUNCTIONS\n                     * @param {String} func_name - Function Name\n                     * @param {Object} req_data - Request Data\n                     * @example\n                     * var func_name = \"custom_function4\";\n                     * var req_data ={\n                     *   \"arguments\": JSON.stringify({\n                     *       \"mailid\" : \"siprxx.xxx@xxxx.com\"\n                     *   })\n                     * };\n                     * ZOHO.CRM.FUNCTIONS.execute(func_name, req_data)\n                     * .then(function(data){\n                     *     console.log(data)\n                     * })\n                     *\n                     * //Prints\n                     * {\n                     *   \"code\": \"success\",\n                     *   \"details\": {\n                     *     \"type\":\"VOID\",\n                     *       \"output\": null,\n                     *       \"id\": \"944000000003001\"\n                     *   },\n                     *   \"message\": \"function executed successfully\"\n                     * }\n                     */\n                    execute: function (func_name, req_data) {\n                        const request = {}\n                        req_data.auth_type = 'oauth'\n                        request.data = req_data\n                        const data = {\n                            category: 'FUNCTIONS_EXECUTE', // no i18n\n                            customFunctionName: func_name,\n                            data: request\n                        }\n                        return newRequestPromise(data)\n                    }\n                },\n\n                /**\n                 * @namespace ZOHO.CRM.CONFIG\n                 */\n                CONFIG: {\n                    /**\n                     * @function getOrgInfo\n                     * @memberof ZOHO.CRM.CONFIG\n                     * @description get plugins configuration data\n                     * @returns {Promise} Resolved with Plugin Configuration\n                     * @example\n                     * ZOHO.CRM.CONFIG.getOrgInfo().then(function(data){\n                     * \tconsole.log(data);\n                     * });\n                     *\n                     * //prints\n                     *{\n                     *  \"Success\": {\n                     *   \"Content\": \"12345\"\n                     *  }\n                     *}\n                     *\n                     */\n                    getOrgInfo: function (nameSpace) {\n                        return config('ORG')\n                    },\n                    /**\n                     * @function getCurrentUser\n                     * @memberof ZOHO.CRM.CONFIG\n                     * @description get Current User info\n                     * @returns {Promise} Resolved with User info\n                     * @example\n                     * ZOHO.CRM.CONFIG.getCurrentUser().then(function(data){\n                     * \tconsole.log(data);\n                     * });\n                     *\n                     * //prints\n                     * {\n                     *   \"confirm\": true,\n                     *   \"full_name\": \"asd devvv\",\n                     *   \"role\": {\n                     *     \"name\": \"CEO\",\n                     *     \"id\": \"1000000028936\"\n                     *   },\n                     *   \"profile\": {\n                     *     \"name\": \"Administrator\",\n                     *     \"id\": \"1000000028942\"\n                     *   },\n                     *   \"last_name\": \"asd devvv\",\n                     *   \"alias\": null,\n                     *   \"id\": \"1000000030132\",\n                     *   \"first_name\": null,\n                     *   \"email\": \"naresh.babu+dev1@zylker.com\",\n                     *   \"zuid\": \"4253443\",\n                     *   \"status\": \"active\"\n                     * }\n                     *\n                     */\n                    getCurrentUser: function () {\n                        return config('CURRENT_USER')\n                    },\n                    /*\n                     * @function GetCurrentEnvironment\n                     * @memberof ZOHO.CRM.CONFIG\n                     * @description get Current org info\n                     * @returns {Promise} Resolved with User info\n                     * @example\n                     * ZOHO.CRM.CONFIG.GetCurrentEnvironment().then(function(data){\n                     *  console.log(data);\n                     * });\n                     *\n                     * //prints\n                     *\n                     *\n                     *{\n                     *  \"deployment\": \"US\",\n                     *  \"ZGID\": 1001244313,\n                     *  \"ZUID\": \"1001244314\",\n                     *  \"appDetails\": {\n                     *    \"appUrl\": \"https://vettti.ucrm.com\"\n                     *  }\n                     *}\n                     *\n                     */\n                    GetCurrentEnvironment: function () {\n                        return config('ORG_LEVEL_INFO')\n                    }\n                    /*\n                    * @function createUser\n                    * @memberof ZOHO.CRM.CONFIG\n                    * @description create user\n                    * @param {Object} config - Configuration Object.\n                    * @returns {Promise} Resolved with user details\n                    * @example\n                    *\n                    *var config = {\n                    *  \"users\": [\n                    *    {\n                    *      \"last_name\": \"TestUser2\",\n                    *      \"email\": \"test_account20@zohocorp.com\",\n                    *      \"role\": \"111126000000030021\",\n                    *      \"profile\": \"111126000000030027\"\n                    *    }\n                    *  ]\n                    *}\n                    *\n                    *\n                    *\n                    * ZOHO.CRM.CONFIG.createUser(config).then(function(data){\n                    *    console.log(data)\n                    * });\n                    *\n                    *\n                    * //prints\n                    *\n                    *{\n                    *  \"users\": [\n                    *    {\n                    *      \"code\": \"SUCCESS\",\n                    *      \"details\": {\n                    *        \"id\": \"111155000000032661\"\n                    *      },\n                    *      \"message\": \"User added\",\n                    *      \"status\": \"success\"\n                    *    }\n                    *  ]\n                    *}\n                    *\n                    createUser: function(data)\n                    {\n                        return config(\"CREATEUSER\",\"\",data);\n                    },\n                    * @function editUser\n                    * @memberof ZOHO.CRM.CONFIG\n                    * @description edit user details\n                    * @param {Object} config - Configuration Object.\n                    * @param {String} config.id - user id\n                    * @param {String} config.userobject - json object to update the user details\n                    * @returns {Promise} Resolved with user details\n                    * @example\n                    *\n                    *var userdetails =\n                    *{\n                    *  \"users\": [\n                    *    {\n                    *      \"website\": \"https://www.zoho.com/docs\",\n                    *      \"fax\": \"test\",\n                    *      \"Mobile\": 1234567890,\n                    *      \"Phone\": 1234567890\n                    *    }\n                    *  ]\n                    *}\n                    *\n                    * var config =\n                    *{\n                    *   id:\"6000000031085\",\n                    *   userobject:userdetails\n                    *}\n                    *\n                    *ZOHO.CRM.CONFIG.editUser(config).then(function(data){\n                    *  console.log(data);\n                    *});\n                    *\n                    *\n                    * //prints\n                    *\n                    *{\n                    *  \"users\": [\n                    *    {\n                    *      \"code\": \"SUCCESS\",\n                    *      \"details\": {\n                    *        \"id\": \"111155000000032680\"\n                    *      },\n                    *      \"message\": \"User updated\",\n                    *      \"status\": \"success\"\n                    *    }\n                    *  ]\n                    *}\n                    *\n                    editUser: function(data)\n                    {\n                        return config(\"EDITUSER\",\"\",data);\n                    },\n                    * @function deleteUser\n                    * @memberof ZOHO.CRM.CONFIG\n                    * @description delete user from crm\n                    * @params {object} config - details of the delete user\n                    * @params {String} config.id - user id\n                    * @returns {Promise} Resolved with user details\n                    * @example\n                    *\n                    * var config =\n                    *{\n                    *    id:\"6000000032001\"\n                    *}\n                    *\n                    *\n                    * ZOHO.CRM.CONFIG.deleteUser(config).then(function(data){\n                    *    console.log(data);\n                    * });\n                    *\n                    *\n                    * //prints\n                    *\n                    *{\n                    *  \"users\": [\n                    *    {\n                    *      \"code\": \"SUCCESS\",\n                    *      \"details\": {},\n                    *      \"message\": \"User deleted\",\n                    *      \"status\": \"success\"\n                    *    }\n                    *  ]\n                    *}\n                    *\n                    deleteUser: function(data)\n                    {\n                        return config(\"DELETEUSER\",\"\",data);\n                    } */\n                },\n                /**\n                 * @namespace ZOHO.CRM.META\n                 */\n                META: {\n                    /**\n                     * @function getFields\n                     * @memberof ZOHO.CRM.META\n                     * @description get field lables and api names\n                     * @param {Object} config - Configuration Object.\n                     * @param {String} config.Entity - SysRefName of the module.\n                     * @returns {Promise} Resolved with data of record matching with Entity and type\n                     * @example\n                     * ZOHO.CRM.META.getFields({\"Entity\":\"Contacts\"}).then(function(data){\n                     * console.log(data);\n                     * });\n                     *\n                     *\n                     * //prints\n                     *\n                     *\n                     *{\n                     *fields:[\n                     *  {\n                     *    \"custom_field\": false,\n                     *    \"lookup\": {\n                     *\n                     *    },\n                     *    \"visible\": true,\n                     *    \"json_type\": \"jsonobject\",\n                     *    \"field_label\": \"Contact Owner\",\n                     *    \"length\": 120,\n                     *    \"column_name\": \"SMOWNERID\",\n                     *    \"view_type\": {\n                     *      \"view\": true,\n                     *      \"edit\": true,\n                     *      \"quick_create\": false,\n                     *      \"create\": true\n                     *    },\n                     *    \"created_source\": \"default\",\n                     *    \"show_type\": 7,\n                     *    \"ui_type\": 8,\n                     *    \"read_only\": false,\n                     *    \"api_name\": \"Owner\",\n                     *    \"unique\": {\n                     *\n                     *    },\n                     *    \"businesscard_supported\": true,\n                     *    \"data_type\": \"ownerlookup\",\n                     *    \"formula\": {\n                     *\n                     *    },\n                     *    \"currency\": {\n                     *\n                     *    },\n                     *    \"id\": \"14000000000649\",\n                     *    \"decimal_place\": null,\n                     *    \"pick_list_values\": [\n                     *\n                     *    ],\n                     *    \"auto_number\": {\n                     *\n                     *    }\n                     *  },\n                     *  {\n                     *    \"custom_field\": false,\n                     *    \"lookup\": {\n                     *\n                     *    },\n                     *    \"visible\": true,\n                     *    \"json_type\": \"string\",\n                     *    \"field_label\": \"Lead Source\",\n                     *    \"length\": 120,\n                     *    \"column_name\": \"LEADSOURCE\",\n                     *    \"view_type\": {\n                     *      \"view\": true,\n                     *      \"edit\": true,\n                     *      \"quick_create\": false,\n                     *      \"create\": true\n                     *    },\n                     *    \"created_source\": \"default\",\n                     *    \"show_type\": 7,\n                     *    \"ui_type\": 2,\n                     *    \"read_only\": false,\n                     *    \"api_name\": \"Lead_Source\",\n                     *    \"unique\": {\n                     *\n                     *    },\n                     *    \"businesscard_supported\": true,\n                     *    \"data_type\": \"picklist\",\n                     *    \"formula\": {\n                     *\n                     *    },\n                     *    \"currency\": {\n                     *\n                     *    },\n                     *    \"id\": \"14000000000651\",\n                     *    \"decimal_place\": null,\n                     *    \"pick_list_values\": [\n                     *      {\n                     *        \"display_value\": \"None\",\n                     *        \"actual_value\": \"-None-\"\n                     *      },\n                     *      {\n                     *        \"display_value\": \"Advertisement\",\n                     *        \"actual_value\": \"Advertisement\"\n                     *      },\n                     *      {\n                     *        \"display_value\": \"Cold Call\",\n                     *        \"actual_value\": \"Cold Call\"\n                     *      },\n                     *      {\n                     *        \"display_value\": \"Employee Referral\",\n                     *        \"actual_value\": \"Employee Referral\"\n                     *      },\n                     *      {\n                     *        \"display_value\": \"External Referral\",\n                     *        \"actual_value\": \"External Referral\"\n                     *      },\n                     *      {\n                     *        \"display_value\": \"Partner\",\n                     *        \"actual_value\": \"Partner\"\n                     *      },\n                     *      {\n                     *        \"display_value\": \"Public Relations\",\n                     *        \"actual_value\": \"Public Relations\"\n                     *      },\n                     *      {\n                     *        \"display_value\": \"Trade Show\",\n                     *        \"actual_value\": \"Trade Show\"\n                     *      },\n                     *      {\n                     *        \"display_value\": \"Web Form\",\n                     *        \"actual_value\": \"Web Form\"\n                     *      },\n                     *      {\n                     *        \"display_value\": \"Search Engine\",\n                     *        \"actual_value\": \"Search Engine\"\n                     *      },\n                     *      {\n                     *        \"display_value\": \"Facebook\",\n                     *        \"actual_value\": \"Facebook\"\n                     *      },\n                     *      {\n                     *        \"display_value\": \"Twitter\",\n                     *        \"actual_value\": \"Twitter\"\n                     *      }\n                     *    ],\n                     *    \"auto_number\": {\n                     *\n                     *    }\n                     *  },\n                     *  {\n                     *    \"custom_field\": false,\n                     *    \"lookup\": {\n                     *\n                     *    },\n                     *    \"visible\": true,\n                     *    \"json_type\": \"string\",\n                     *    \"field_label\": \"First Name\",\n                     *    \"length\": 40,\n                     *    \"column_name\": \"FIRSTNAME\",\n                     *    \"view_type\": {\n                     *      \"view\": false,\n                     *      \"edit\": true,\n                     *      \"quick_create\": true,\n                     *      \"create\": true\n                     *    },\n                     *    \"created_source\": \"default\",\n                     *    \"show_type\": 7,\n                     *    \"ui_type\": 27,\n                     *    \"read_only\": false,\n                     *    \"api_name\": \"First_Name\",\n                     *    \"unique\": {\n                     *\n                     *    },\n                     *    \"businesscard_supported\": false,\n                     *    \"data_type\": \"text\",\n                     *    \"formula\": {\n                     *\n                     *    },\n                     *    \"currency\": {\n                     *\n                     *    },\n                     *    \"id\": \"14000000000653\",\n                     *    \"decimal_place\": null,\n                     *    \"pick_list_values\": [\n                     *\n                     *    ],\n                     *    \"auto_number\": {\n                     *\n                     *    }\n                     *  },\n                     *  {\n                     *    \"custom_field\": false,\n                     *    \"lookup\": {\n                     *\n                     *    },\n                     *    \"visible\": true,\n                     *    \"json_type\": \"string\",\n                     *    \"field_label\": \"Last Name\",\n                     *    \"length\": 80,\n                     *    \"column_name\": \"LASTNAME\",\n                     *    \"view_type\": {\n                     *      \"view\": true,\n                     *      \"edit\": true,\n                     *      \"quick_create\": true,\n                     *      \"create\": true\n                     *    },\n                     *    \"created_source\": \"default\",\n                     *    \"show_type\": 7,\n                     *    \"ui_type\": 127,\n                     *    \"read_only\": false,\n                     *    \"api_name\": \"Last_Name\",\n                     *    \"unique\": {\n                     *\n                     *    },\n                     *    \"businesscard_supported\": false,\n                     *    \"data_type\": \"text\",\n                     *    \"formula\": {\n                     *\n                     *    },\n                     *    \"currency\": {\n                     *\n                     *    },\n                     *    \"id\": \"14000000000655\",\n                     *    \"decimal_place\": null,\n                     *    \"pick_list_values\": [\n                     *\n                     *    ],\n                     *    \"auto_number\": {\n                     *\n                     *    }\n                     *  },\n                     *  {\n                     *    \"custom_field\": false,\n                     *    \"lookup\": {\n                     *\n                     *    },\n                     *    \"visible\": true,\n                     *    \"json_type\": \"string\",\n                     *    \"field_label\": \"Full Name\",\n                     *    \"length\": 80,\n                     *    \"column_name\": \"FULLNAME\",\n                     *    \"view_type\": {\n                     *      \"view\": true,\n                     *      \"edit\": false,\n                     *      \"quick_create\": false,\n                     *      \"create\": false\n                     *    },\n                     *    \"created_source\": \"default\",\n                     *    \"show_type\": 0,\n                     *    \"ui_type\": 1,\n                     *    \"read_only\": false,\n                     *    \"api_name\": \"Full_Name\",\n                     *    \"unique\": {\n                     *\n                     *    },\n                     *    \"businesscard_supported\": false,\n                     *    \"data_type\": \"text\",\n                     *    \"formula\": {\n                     *\n                     *    },\n                     *    \"currency\": {\n                     *\n                     *    },\n                     *    \"id\": \"14000000000657\",\n                     *    \"decimal_place\": null,\n                     *    \"pick_list_values\": [\n                     *\n                     *    ],\n                     *    \"auto_number\": {\n                     *\n                     *    }\n                     *  }\n                     *]\n                     *}\n                     */\n                    getFields: function (data) {\n                        data.type = 'FIELD_LIST'\n                        return getMeta(data)\n                    },\n                    /**\n                     * @function getModules\n                     * @memberof ZOHO.CRM.META\n                     * @description get Modules list\n                     * @returns {Promise} Resolved with data of all modules\n                     * @example\n                     * ZOHO.CRM.META.getModules().then(function(data){\n                     * console.log(data);\n                     * });\n                     *\n                     *\n                     * //prints\n                     *\n                     *\n                     *{\n\t\t\t\t\t *  \"modules\": [{\n\t\t\t\t\t *      \"global_search_supported\": false,\n\t\t\t\t\t *      \"deletable\": false,\n\t\t\t\t\t *      \"creatable\": false,\n\t\t\t\t\t *      \"modified_time\": null,\n\t\t\t\t\t *      \"plural_label\": \"Home\",\n\t\t\t\t\t *      \"presence_sub_menu\": false,\n\t\t\t\t\t *      \"id\": \"457154000000000123\",\n\t\t\t\t\t *      \"visible\": true,\n\t\t\t\t \t *      \"visibility\": 1,\n\t\t\t\t\t *      \"convertable\": false,\n\t\t\t\t\t *      \"editable\": false,\n\t\t\t\t\t *      \"profiles\": [{\n\t\t\t\t\t *          \"name\": \"Administrator\",\n\t\t\t\t\t *          \"id\": \"457154000000015972\"\n\t\t\t\t\t *        },\n\t\t\t\t\t *        {\n\t\t\t\t\t *          \"name\": \"Standard\",\n\t\t\t\t\t *          \"id\": \"457154000000015975\"\n\t\t\t\t\t *        }\n\t\t\t\t\t *      ],\n\t\t\t\t\t *      \"filter_supported\": false,\n\t\t\t\t\t *      \"web_link\": null,\n\t\t\t\t\t *      \"sequence_number\": 1,\n\t\t\t\t\t *      \"singular_label\": \"Home\",\n\t\t\t\t\t *      \"viewable\": true,\n\t\t\t\t\t *      \"api_supported\": false,\n\t\t\t\t\t *      \"api_name\": \"Home\",\n\t\t\t\t\t *      \"quick_create\": false,\n\t\t\t\t\t *      \"modified_by\": null,\n\t\t\t\t\t *      \"generated_type\": \"default\",\n\t\t\t\t\t *      \"feeds_required\": false,\n\t\t\t\t\t *      \"scoring_supported\": false,\n\t\t\t\t\t *      \"arguments\": [],\n\t\t\t\t\t *      \"module_name\": \"Home\",\n\t\t\t\t\t *      \"business_card_field_limit\": 0,\n\t\t\t\t\t *      \"parent_module\": {}\n\t\t\t\t\t *    },\n\t\t\t\t\t *    {\n\t\t\t\t\t *      \"global_search_supported\": false,\n\t\t\t\t\t *      \"deletable\": false,\n\t\t\t\t\t *      \"creatable\": false,\n\t\t\t\t\t *      \"modified_time\": null,\n\t\t\t\t\t *      \"plural_label\": \"SalesInbox\",\n\t\t\t\t\t *      \"presence_sub_menu\": false,\n\t\t\t\t\t *      \"id\": \"457154000000129001\",\n\t\t\t\t\t *      \"visible\": true,\n\t\t\t\t\t *      \"visibility\": 1,\n\t\t\t\t\t *      \"convertable\": false,\n\t\t\t\t\t *      \"editable\": false,\n\t\t\t\t\t *      \"profiles\": [{\n\t\t\t\t\t *          \"name\": \"Administrator\",\n\t\t\t\t\t *          \"id\": \"457154000000015972\"\n\t\t\t\t \t *        },\n\t\t\t\t\t *        {\n\t\t\t \t\t *          \"name\": \"Standard\",\n\t\t\t\t \t *          \"id\": \"457154000000015975\"\n\t\t\t\t\t *        }\n\t\t\t\t\t *      ],\n\t\t\t\t\t *      \"filter_supported\": false,\n\t\t\t\t\t *      \"web_link\": null,\n\t\t\t\t \t *      \"sequence_number\": 2,\n\t\t\t\t\t *      \"singular_label\": \"SalesInbox\",\n\t\t\t\t\t *      \"viewable\": true,\n\t\t\t\t\t *      \"api_supported\": false,\n\t\t\t\t\t *      \"api_name\": \"SalesInbox\",\n\t\t\t\t\t *      \"quick_create\": false,\n\t\t\t\t\t *      \"modified_by\": null,\n\t\t\t\t\t *      \"generated_type\": \"default\",\n\t\t\t\t\t *      \"feeds_required\": false,\n\t\t\t\t\t *      \"scoring_supported\": false,\n\t\t\t\t\t *      \"arguments\": [],\n\t\t\t\t\t *      \"module_name\": \"SalesInbox\",\n\t\t\t\t\t *      \"business_card_field_limit\": 0,\n\t\t\t\t \t *      \"parent_module\": {}\n\t\t\t\t\t *    },\n\t\t\t\t\t *    {\n\t\t\t\t\t *      \"global_search_supported\": false,\n\t\t\t\t\t *      \"deletable\": false,\n\t\t\t\t\t *      \"creatable\": false,\n\t\t\t\t\t *      \"modified_time\": null,\n\t\t\t\t\t *      \"plural_label\": \"Feeds\",\n\t\t\t\t\t *      \"presence_sub_menu\": false,\n\t\t\t\t\t *      \"id\": \"457154000000059001\",\n\t\t\t\t\t *      \"visible\": true,\n\t\t\t\t\t *      \"visibility\": 1,\n\t\t\t\t\t *      \"convertable\": false,\n\t\t\t\t\t *      \"editable\": false,\n\t\t\t\t \t *      \"profiles\": [],\n\t\t\t \t\t *      \"filter_supported\": false,\n\t\t\t\t\t *      \"web_link\": null,\n\t\t\t\t\t *      \"sequence_number\": 3,\n\t\t\t\t\t *      \"singular_label\": \"Feeds\",\n\t\t\t\t \t *      \"viewable\": true,\n\t\t\t \t\t *      \"api_supported\": false,\n\t\t\t\t\t *      \"api_name\": \"Feeds\",\n\t\t\t\t\t *      \"quick_create\": false,\n\t\t\t\t\t *      \"modified_by\": null,\n\t\t\t\t\t *      \"generated_type\": \"default\",\n\t\t\t\t\t *      \"feeds_required\": false,\n\t\t\t\t\t *      \"scoring_supported\": false,\n\t\t\t\t\t *      \"arguments\": [],\n\t\t\t\t\t *      \"module_name\": \"Feeds\",\n\t\t\t\t\t *      \"business_card_field_limit\": 0,\n\t\t\t\t\t *      \"parent_module\": {}\n\t\t\t\t\t *    },\n\t\t\t\t\t *    {\n\t\t\t\t\t *      \"global_search_supported\": true,\n\t\t\t\t\t *      \"deletable\": true,\n\t\t\t\t\t *      \"creatable\": true,\n\t\t\t\t\t *      \"modified_time\": \"2018-10-23T11:39:36+05:30\",\n\t\t\t\t\t *      \"plural_label\": \"Leads\",\n\t\t\t\t\t *      \"presence_sub_menu\": true,\n\t\t\t\t\t *      \"id\": \"457154000000000125\",\n\t\t\t\t\t *      \"visible\": true,\n\t\t\t\t\t *      \"visibility\": 1,\n\t\t\t\t\t *      \"convertable\": true,\n\t\t\t\t\t *      \"editable\": true,\n\t\t\t\t\t *      \"profiles\": [{\n\t\t\t\t\t *          \"name\": \"Administrator\",\n\t\t\t\t\t *          \"id\": \"457154000000015972\"\n\t\t\t\t\t *        },\n\t\t\t\t\t *        {\n\t\t\t\t\t *          \"name\": \"Standard\",\n\t\t\t\t\t *          \"id\": \"457154000000015975\"\n\t\t\t\t\t *        }\n\t\t\t\t\t *      ],\n\t\t\t\t\t *      \"filter_supported\": true,\n\t\t\t\t\t *      \"web_link\": null,\n\t\t\t\t\t *      \"sequence_number\": 4,\n\t\t\t\t\t *      \"singular_label\": \"Lead\",\n\t\t\t\t\t *      \"viewable\": true,\n\t\t\t\t\t *      \"api_supported\": true,\n\t\t\t\t\t *      \"api_name\": \"Leads\",\n\t\t\t\t\t *      \"quick_create\": true,\n\t\t\t\t\t *      \"modified_by\": {\n\t\t\t\t\t *        \"name\": \"NareshAutomation\",\n\t\t\t\t\t *        \"id\": \"457154000000148011\"\n\t\t\t\t\t *      },\n\t\t\t\t\t *      \"generated_type\": \"default\",\n\t\t\t\t\t *      \"feeds_required\": false,\n\t\t\t\t\t *      \"scoring_supported\": true,\n\t\t\t\t\t *      \"arguments\": [],\n\t\t\t\t\t *      \"module_name\": \"Leads\",\n\t\t\t\t\t *      \"business_card_field_limit\": 5,\n\t\t\t\t\t *      \"parent_module\": {}\n\t\t\t\t\t *    },\n\t\t\t\t\t *    {\n\t\t\t\t\t *      \"global_search_supported\": true,\n\t\t\t\t\t *      \"deletable\": true,\n\t\t\t\t\t *      \"creatable\": true,\n\t\t\t\t\t *      \"modified_time\": null,\n\t\t\t\t\t *      \"plural_label\": \"Accounts\",\n\t\t\t\t\t *      \"presence_sub_menu\": true,\n\t\t\t\t\t *      \"id\": \"457154000000000127\",\n\t\t\t\t\t *      \"visible\": true,\n\t\t\t\t\t *      \"visibility\": 1,\n\t\t\t\t\t *      \"convertable\": false,\n\t\t\t\t\t *      \"editable\": true,\n\t\t\t\t\t *      \"profiles\": [{\n\t\t\t\t\t *          \"name\": \"Administrator\",\n\t\t\t\t\t *          \"id\": \"457154000000015972\"\n\t\t\t\t\t *        },\n\t\t\t\t\t *        {\n\t\t\t\t\t *          \"name\": \"Standard\",\n\t\t\t\t\t *          \"id\": \"457154000000015975\"\n\t\t\t\t\t *        }\n\t\t\t\t\t *      ],\n\t\t\t\t\t *      \"filter_supported\": true,\n\t\t\t\t\t *      \"web_link\": null,\n\t\t\t\t\t *      \"sequence_number\": 5,\n\t\t\t\t\t *      \"singular_label\": \"Account\",\n\t\t\t\t\t *      \"viewable\": true,\n\t\t\t\t\t *      \"api_supported\": true,\n\t\t\t\t\t *      \"api_name\": \"Accounts\",\n\t\t\t\t\t *      \"quick_create\": true,\n\t\t\t\t\t *      \"modified_by\": null,\n\t\t\t\t\t *      \"generated_type\": \"default\",\n\t\t\t\t\t *      \"feeds_required\": false,\n\t\t\t\t\t *      \"scoring_supported\": true,\n\t\t\t\t\t *      \"arguments\": [],\n\t\t\t\t\t *      \"module_name\": \"Accounts\",\n\t\t\t\t\t *      \"business_card_field_limit\": 5,\n\t\t\t\t\t *      \"parent_module\": {}\n\t\t\t\t\t *    }\n\t\t\t\t\t *  ]\n\t\t\t\t\t *}\n\t\t\t\t\t *\n                     */\n                    getModules: function () {\n                        const data = {\n                            type: 'MODULE_LIST'\n                        }\n                        return getMeta(data)\n                    },\n                    /**\n                     * @function getAssignmentRules\n                     * @memberof ZOHO.CRM.META\n                     * @description get Assignment rules details\n                     * @param {Object} config - Configuration Object.\n                     * @param {String} config.Entity - SysRefName of the module.\n                     * @returns {Promise} Resolved with data of Assignment rules matching with Entity\n                     * @example\n                     * ZOHO.CRM.META.getAssignmentRules({\"Entity\":\"Contacts\"}).then(function(data){\n                     * console.log(data);\n                     * });\n                     *\n                     *\n                     * //prints\n                     *\n                     *\n                     *{\n                     *  \"assignment_rules\": [\n                     *    {\n                     *      \"module\": {\n                     *        \"api_name\": \"Leads\",\n                     *        \"id\": \"13000000000039\"\n                     *      },\n                     *      \"name\": \"Lead rule\",\n                     *      \"id\": \"13000000036019\",\n                     *      \"created_date\": \"2017-05-12\",\n                     *      \"created_by\": {\n                     *        \"name\": \" uk\",\n                     *        \"id\": \"13000000030480\"\n                     *      }\n                     *    },\n                     *    {\n                     *      \"module\": {\n                     *       \"api_name\": \"Leads\",\n                     *        \"id\": \"13000000000039\"\n                     *     },\n                     *      \"name\": \"Lead second entry\",\n                     *     \"id\": \"13000000036045\",\n                     *      \"created_date\": \"2017-05-12\",\n                     *      \"created_by\": {\n                     *        \"name\": \" uk\",\n                     *        \"id\": \"13000000030480\"\n                     *      }\n                     *    }\n                     *  ]\n                     *}\n                     */\n                    getAssignmentRules: function (data) {\n                        data.type = 'ASSIGNMENT_RULES'\n                        return getMeta(data)\n                    },\n\n                    /**\n                     * @function getLayouts\n                     * @memberof ZOHO.CRM.META\n                     * @description get Layout details of a module\n                     * @param {Object} config - Configuration Object.\n                     * @param {String} config.Entity - SysRefName of the module.\n                     * @param {String} [config.Id] - layout ID.\n                     * @returns {Promise} Resolved with data of Assignment rules matching with Entity\n                     * @example\n                     * ZOHO.CRM.META.getLayouts({\"Entity\":\"Contacts\"}).then(function(data){\n                     * console.log(data);\n                     * });\n                     * @example\n                     * ZOHO.CRM.META.getLayouts({\"Entity\":\"Contacts\",\"LayoutId\":\"5000000000169\"}).then(function(data){\n                     * console.log(data);\n                     * });\n                     * @example\n                     * //prints\n                     *{\n                     *  \"layouts\": [\n                     *    {\n                     *      \"created_time\": null,\n                     *      \"modified_time\": null,\n                     *      \"visible\": true,\n                     *      \"name\": \"Standard\",\n                     *      \"modified_by\": null,\n                     *      \"profiles\": [\n                     *        {\n                     *          \"default\": true,\n                     *          \"name\": \"Administrator\",\n                     *          \"id\": \"3000000029725\"\n                     *        },\n                     *        {\n                     *          \"default\": true,\n                     *          \"name\": \"Standard\",\n                     *          \"id\": \"3000000029728\"\n                     *        }\n                     *      ],\n                     *      \"id\": \"3000000000169\",\n                     *      \"created_by\": null,\n                     *      \"sections\": [\n                     *        {\n                     *          \"display_label\": \"Contact Information\",\n                     *          \"sequence_number\": 1,\n                     *          \"column_count\": 2,\n                     *          \"name\": \"Contact Information\",\n                     *          \"fields\": [\n                     *            {\n                     *              \"json_type\": \"jsonobject\",\n                     *              \"field_label\": \"Contact Owner\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 8,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000673\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 120,\n                     *              \"column_name\": \"SMOWNERID\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 1,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Owner\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"ownerlookup\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Lead Source\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 2,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000675\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 120,\n                     *              \"column_name\": \"LEADSOURCE\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 2,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Lead_Source\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"picklist\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [\n                     *                {\n                     *                  \"display_value\": \"-None-\",\n                     *                  \"sequence_number\": 1,\n                     *                  \"maps\": [],\n                     *                  \"actual_value\": \"-None-\"\n                     *                },\n                     *                {\n                     *                  \"display_value\": \"Advertisement\",\n                     *                  \"sequence_number\": 2,\n                     *                  \"maps\": [],\n                     *                  \"actual_value\": \"Advertisement\"\n                     *                },\n                     *                {\n                     *                  \"display_value\": \"Cold Call\",\n                     *                  \"sequence_number\": 3,\n                     *                  \"maps\": [],\n                     *                  \"actual_value\": \"Cold Call\"\n                     *                },\n                     *                {\n                     *                  \"display_value\": \"Employee Referral\",\n                     *                  \"sequence_number\": 4,\n                     *                  \"maps\": [],\n                     *                  \"actual_value\": \"Employee Referral\"\n                     *                },\n                     *                {\n                     *                  \"display_value\": \"External Referral\",\n                     *                  \"sequence_number\": 5,\n                     *                  \"maps\": [],\n                     *                  \"actual_value\": \"External Referral\"\n                     *                },\n                     *                {\n                     *                  \"display_value\": \"Partner\",\n                     *                  \"sequence_number\": 6,\n                     *                  \"maps\": [],\n                     *                  \"actual_value\": \"Partner\"\n                     *                },\n                     *                {\n                     *                  \"display_value\": \"Public Relations\",\n                     *                  \"sequence_number\": 7,\n                     *                  \"maps\": [],\n                     *                  \"actual_value\": \"Public Relations\"\n                     *                },\n                     *                {\n                     *                  \"display_value\": \"Trade Show\",\n                     *                  \"sequence_number\": 8,\n                     *                  \"maps\": [],\n                     *                  \"actual_value\": \"Trade Show\"\n                     *                },\n                     *                {\n                     *                  \"display_value\": \"Web Form\",\n                     *                  \"sequence_number\": 9,\n                     *                  \"maps\": [],\n                     *                  \"actual_value\": \"Web Form\"\n                     *                },\n                     *                {\n                     *                  \"display_value\": \"Search Engine\",\n                     *                  \"sequence_number\": 10,\n                     *                  \"maps\": [],\n                     *                  \"actual_value\": \"Search Engine\"\n                     *                },\n                     *                {\n                     *                  \"display_value\": \"Facebook\",\n                     *                  \"sequence_number\": 11,\n                     *                  \"maps\": [],\n                     *                  \"actual_value\": \"Facebook\"\n                     *                },\n                     *                {\n                     *                  \"display_value\": \"Twitter\",\n                     *                  \"sequence_number\": 12,\n                     *                  \"maps\": [],\n                     *                  \"actual_value\": \"Twitter\"\n                     *                }\n                     *              ],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"First Name\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 27,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000677\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 40,\n                     *              \"column_name\": \"FIRSTNAME\",\n                     *              \"view_type\": {\n                     *                \"view\": false,\n                     *                \"edit\": true,\n                     *                \"quick_create\": true,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 3,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"First_Name\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Last Name\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": true,\n                     *              \"ui_type\": 127,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000679\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 80,\n                     *              \"column_name\": \"LASTNAME\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": true,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 4,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Last_Name\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Full Name\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 1,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000681\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 80,\n                     *              \"column_name\": \"FULLNAME\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": false,\n                     *                \"quick_create\": false,\n                     *                \"create\": false\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 5,\n                     *              \"show_type\": 0,\n                     *              \"api_name\": \"Full_Name\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"jsonobject\",\n                     *              \"field_label\": \"Account Name\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 4,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000683\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {\n                     *                \"display_label\": \"Contacts\",\n                     *                \"api_name\": \"Contacts\",\n                     *                \"module\": {\n                     *                  \"api_name\": \"Accounts\",\n                     *                  \"id\": \"3000000000043\"\n                     *                },\n                     *                \"id\": \"3000000003935\"\n                     *              },\n                     *              \"visible\": true,\n                     *              \"length\": 120,\n                     *              \"column_name\": \"ACCOUNTID\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": true,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 6,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Account_Name\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"lookup\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"jsonobject\",\n                     *              \"field_label\": \"Vendor Name\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 9,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000685\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {\n                     *                \"display_label\": \"Contacts\",\n                     *                \"api_name\": \"Contacts\",\n                     *                \"module\": {\n                     *                  \"api_name\": \"Vendors\",\n                     *                  \"id\": \"3000000000099\"\n                     *                },\n                     *                \"id\": \"3000000012263\"\n                     *              },\n                     *              \"visible\": true,\n                     *              \"length\": 120,\n                     *              \"column_name\": \"VENDORID\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 7,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Vendor_Name\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"lookup\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Email\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 25,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000687\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 100,\n                     *              \"column_name\": \"EMAIL\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": true,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 8,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Email\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"email\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Title\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 1,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000691\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 100,\n                     *              \"column_name\": \"TITLE\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 10,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Title\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Department\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 1,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000693\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 50,\n                     *              \"column_name\": \"DEPARTMENT\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 11,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Department\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Phone\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 33,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000695\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 50,\n                     *              \"column_name\": \"PHONE\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": true,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 12,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Phone\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"phone\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Home Phone\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 33,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000697\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 30,\n                     *              \"column_name\": \"HOMEPHONE\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 13,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Home_Phone\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"phone\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Other Phone\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 33,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000699\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 30,\n                     *              \"column_name\": \"OTHERPHONE\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 14,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Other_Phone\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"phone\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Fax\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 35,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000701\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 30,\n                     *              \"column_name\": \"FAX\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 15,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Fax\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Mobile\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 33,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000703\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 30,\n                     *              \"column_name\": \"MOBILE\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 16,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Mobile\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"phone\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Date of Birth\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 24,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000705\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 20,\n                     *              \"column_name\": \"BIRTHDAY\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 17,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Date_of_Birth\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"date\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Assistant\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 1,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000707\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 50,\n                     *              \"column_name\": \"ASSISTANT\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 18,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Assistant\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Asst Phone\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 33,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000709\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 30,\n                     *              \"column_name\": \"ASSISTANTPHONE\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 19,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Asst_Phone\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"phone\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Reports To\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 1,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000711\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 50,\n                     *              \"column_name\": \"REPORTSTO\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 20,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Reports_To\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"boolean\",\n                     *              \"field_label\": \"Email Opt Out\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 301,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000713\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 5,\n                     *              \"column_name\": \"EMAILOPTOUT\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": false,\n                     *              \"sequence_number\": 21,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Email_Opt_Out\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"boolean\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Skype ID\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 37,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000715\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 50,\n                     *              \"column_name\": \"SKYPEIDENTITY\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 22,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Skype_ID\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"jsonobject\",\n                     *              \"field_label\": \"Created By\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 20,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000717\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 120,\n                     *              \"column_name\": \"SMCREATORID\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": false,\n                     *                \"quick_create\": false,\n                     *                \"create\": false\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 23,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Created_By\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"ownerlookup\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"jsonobject\",\n                     *              \"field_label\": \"Modified By\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 20,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000719\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 120,\n                     *              \"column_name\": \"MODIFIEDBY\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": false,\n                     *                \"quick_create\": false,\n                     *                \"create\": false\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 24,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Modified_By\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"ownerlookup\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Created Time\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 200,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000721\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 120,\n                     *              \"column_name\": \"CREATEDTIME\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": false,\n                     *                \"quick_create\": false,\n                     *                \"create\": false\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 25,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Created_Time\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"datetime\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Modified Time\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 200,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000723\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 120,\n                     *              \"column_name\": \"MODIFIEDTIME\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": false,\n                     *                \"quick_create\": false,\n                     *                \"create\": false\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 26,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Modified_Time\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"datetime\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Salutation\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 2,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000727\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 120,\n                     *              \"column_name\": \"SALUTATION\",\n                     *              \"view_type\": {\n                     *                \"view\": false,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 28,\n                     *              \"show_type\": 8,\n                     *              \"api_name\": \"Salutation\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"picklist\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [\n                     *                {\n                     *                  \"display_value\": \"-None-\",\n                     *                  \"sequence_number\": 1,\n                     *                  \"maps\": [],\n                     *                  \"actual_value\": \"-None-\"\n                     *                },\n                     *                {\n                     *                  \"display_value\": \"Mr.\",\n                     *                  \"sequence_number\": 2,\n                     *                  \"maps\": [],\n                     *                  \"actual_value\": \"Mr.\"\n                     *                },\n                     *                {\n                     *                  \"display_value\": \"Mrs.\",\n                     *                  \"sequence_number\": 3,\n                     *                  \"maps\": [],\n                     *                  \"actual_value\": \"Mrs.\"\n                     *                },\n                     *                {\n                     *                  \"display_value\": \"Ms.\",\n                     *                  \"sequence_number\": 4,\n                     *                  \"maps\": [],\n                     *                  \"actual_value\": \"Ms.\"\n                     *                }\n                     *              ],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"boolean\",\n                     *              \"field_label\": \"Add to QuickBooks\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 301,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000729\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 5,\n                     *              \"column_name\": \"ADDTOQUICKBOOKS\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": false,\n                     *              \"sequence_number\": 29,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Add_to_QuickBooks\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"boolean\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Secondary Email\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 25,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000731\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 100,\n                     *              \"column_name\": \"ADDN_EMAIL\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 30,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Secondary_Email\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"email\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Last Activity Time\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 786,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000737\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 120,\n                     *              \"column_name\": \"LASTACTIVITYTIME\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": false,\n                     *                \"quick_create\": false,\n                     *                \"create\": false\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 33,\n                     *              \"show_type\": 8,\n                     *              \"api_name\": \"Last_Activity_Time\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"datetime\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Twitter\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 22,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000739\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 50,\n                     *              \"column_name\": \"TWITTER\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 34,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Twitter\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            }\n                     *          ]\n                     *        },\n                     *        {\n                     *          \"display_label\": \"Address Information\",\n                     *          \"sequence_number\": 2,\n                     *          \"column_count\": 2,\n                     *          \"name\": \"Address Information\",\n                     *          \"fields\": [\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Mailing Street\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 1,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000747\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 250,\n                     *              \"column_name\": \"MAILINGSTREET\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 1,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Mailing_Street\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Other Street\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 1,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000749\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 250,\n                     *              \"column_name\": \"OTHERSTREET\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 2,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Other_Street\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Mailing City\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 1,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000751\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 30,\n                     *              \"column_name\": \"MAILINGCITY\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 3,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Mailing_City\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Other City\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 1,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000753\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 30,\n                     *              \"column_name\": \"OTHERCITY\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 4,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Other_City\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Mailing State\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 1,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000755\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 30,\n                     *              \"column_name\": \"MAILINGSTATE\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 5,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Mailing_State\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Other State\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 1,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000757\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 30,\n                     *              \"column_name\": \"OTHERSTATE\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 6,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Other_State\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Mailing Zip\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 1,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000759\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 30,\n                     *              \"column_name\": \"MAILINGZIP\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 7,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Mailing_Zip\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Other Zip\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 1,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000761\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 30,\n                     *              \"column_name\": \"OTHERZIP\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 8,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Other_Zip\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Mailing Country\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 1,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000763\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 30,\n                     *              \"column_name\": \"MAILINGCOUNTRY\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 9,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Mailing_Country\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            },\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Other Country\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 1,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000765\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 30,\n                     *              \"column_name\": \"OTHERCOUNTRY\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 10,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Other_Country\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"text\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            }\n                     *          ]\n                     *        },\n                     *        {\n                     *          \"display_label\": \"Description Information\",\n                     *          \"sequence_number\": 3,\n                     *          \"column_count\": 1,\n                     *          \"name\": \"Description Information\",\n                     *          \"fields\": [\n                     *            {\n                     *              \"json_type\": \"string\",\n                     *              \"field_label\": \"Description\",\n                     *              \"tooltip\": null,\n                     *              \"created_source\": \"default\",\n                     *              \"required\": false,\n                     *              \"ui_type\": 3,\n                     *              \"read_only\": false,\n                     *              \"currency\": {},\n                     *              \"id\": \"3000000000767\",\n                     *              \"custom_field\": false,\n                     *              \"lookup\": {},\n                     *              \"visible\": true,\n                     *              \"length\": 1000,\n                     *              \"column_name\": \"DESCRIPTION\",\n                     *              \"view_type\": {\n                     *                \"view\": true,\n                     *                \"edit\": true,\n                     *                \"quick_create\": false,\n                     *                \"create\": true\n                     *              },\n                     *              \"default_value\": null,\n                     *              \"sequence_number\": 1,\n                     *              \"show_type\": 7,\n                     *              \"api_name\": \"Description\",\n                     *              \"unique\": {},\n                     *              \"data_type\": \"textarea\",\n                     *              \"formula\": {},\n                     *              \"decimal_place\": null,\n                     *              \"pick_list_values\": [],\n                     *              \"auto_number\": {}\n                     *            }\n                     *          ]\n                     *        },\n                     *        {\n                     *          \"display_label\": \"Score Summary\",\n                     *          \"sequence_number\": 4,\n                     *          \"column_count\": 2,\n                     *          \"name\": \"Score Summary\",\n                     *          \"fields\": []\n                     *        }\n                     *      ],\n                     *      \"status\": 0\n                     *    }\n                     *  ]\n                     *}\n                     */\n                    getLayouts: function (data) {\n                        data.id = data.id ? data.id : data.LayoutId\n                        data.type = data.Id ? 'LAYOUT' : 'LAYOUTS'\n                        return getMeta(data)\n                    },\n\n                    /**\n                     * @function getRelatedList\n                     * @memberof ZOHO.CRM.META\n                     * @description get RelatedList meta info of a module\n                     * @param {Object} config - Configuration Object.\n                     * @param {String} config.Entity - SysRefName of the module.\n                     * @returns {Promise} Resolved with data of Assignment rules matching with Entity\n                     * @example\n                     * ZOHO.CRM.META.getRelatedList({\"Entity\":\"Contacts\"}).then(function(data){\n                     * console.log(data);\n                     * });\n                     *  //prints\n                     *{\n                     *  \"related_lists\": [\n                     *    {\n                     *      \"display_label\": \"Attachments\",\n                     *      \"visible\": true,\n                     *      \"api_name\": \"Attachments\",\n                     *      \"module\": {\n                     *        \"api_name\": \"Attachments\",\n                     *        \"id\": \"3000000000111\"\n                     *      },\n                     *      \"name\": \"Attachments\",\n                     *      \"id\": \"3000000003968\",\n                     *      \"href\": \"Contacts/{ENTITYID}/Attachments\",\n                     *      \"type\": \"default\"\n                     *    },\n                     *    {\n                     *      \"display_label\": \"Deals\",\n                     *      \"visible\": true,\n                     *      \"api_name\": \"Deals\",\n                     *      \"module\": {\n                     *        \"api_name\": \"Deals\",\n                     *        \"id\": \"3000000000047\"\n                     *      },\n                     *      \"name\": \"Deals\",\n                     *      \"id\": \"3000000003974\",\n                     *      \"href\": \"Contacts/{ENTITYID}/Deals\",\n                     *      \"type\": \"default\"\n                     *    },\n                     *    {\n                     *      \"display_label\": \"Notes\",\n                     *      \"visible\": true,\n                     *      \"api_name\": \"Notes\",\n                     *      \"module\": {\n                     *        \"api_name\": \"Notes\",\n                     *        \"id\": \"3000000000069\"\n                     *      },\n                     *      \"name\": \"Notes\",\n                     *      \"id\": \"3000000003971\",\n                     *      \"href\": \"Contacts/{ENTITYID}/Notes\",\n                     *      \"type\": \"default\"\n                     *    },\n                     *    {\n                     *      \"display_label\": \"Open Activities\",\n                     *      \"visible\": true,\n                     *      \"api_name\": \"Activities\",\n                     *      \"module\": {\n                     *        \"api_name\": \"Activities\",\n                     *        \"id\": \"3000000000049\"\n                     *      },\n                     *      \"name\": \"Activities\",\n                     *      \"id\": \"3000000003965\",\n                     *      \"href\": \"Contacts/{ENTITYID}/Activities\",\n                     *      \"type\": \"default\"\n                     *    },\n                     *    {\n                     *      \"display_label\": \"Closed Activities\",\n                     *      \"visible\": true,\n                     *      \"api_name\": \"Activities_History\",\n                     *      \"module\": {\n                     *        \"api_name\": \"Activities\",\n                     *        \"id\": \"3000000000049\"\n                     *      },\n                     *      \"name\": \"Activities History\",\n                     *      \"id\": \"3000000003962\",\n                     *      \"href\": \"Contacts/{ENTITYID}/Activities_History\",\n                     *      \"type\": \"default\"\n                     *    },\n                     *    {\n                     *      \"display_label\": \"Products\",\n                     *      \"visible\": true,\n                     *      \"api_name\": \"Products\",\n                     *      \"module\": {\n                     *        \"api_name\": \"Products\",\n                     *        \"id\": \"3000000000097\"\n                     *      },\n                     *      \"name\": \"Products\",\n                     *      \"id\": \"3000000003977\",\n                     *      \"href\": \"Contacts/{ENTITYID}/Products\",\n                     *      \"type\": \"default\"\n                     *    },\n                     *    {\n                     *      \"display_label\": \"Invited Events\",\n                     *      \"visible\": true,\n                     *      \"api_name\": \"Invited_Events\",\n                     *      \"module\": {\n                     *        \"api_name\": \"Events\",\n                     *        \"id\": \"3000000000065\"\n                     *      },\n                     *      \"name\": \"Invited Events\",\n                     *      \"id\": \"3000000004001\",\n                     *      \"href\": \"Contacts/{ENTITYID}/Invited_Events\",\n                     *      \"type\": \"default\"\n                     *    },\n                     *    {\n                     *      \"display_label\": \"Cases\",\n                     *      \"visible\": true,\n                     *      \"api_name\": \"Cases\",\n                     *      \"module\": {\n                     *        \"api_name\": \"Cases\",\n                     *        \"id\": \"3000000000093\"\n                     *      },\n                     *      \"name\": \"Cases\",\n                     *      \"id\": \"3000000003980\",\n                     *      \"href\": \"Contacts/{ENTITYID}/Cases\",\n                     *      \"type\": \"default\"\n                     *    },\n                     *    {\n                     *      \"display_label\": \"Quotes\",\n                     *      \"visible\": true,\n                     *      \"api_name\": \"Quotes\",\n                     *      \"module\": {\n                     *        \"api_name\": \"Quotes\",\n                     *        \"id\": \"3000000000103\"\n                     *      },\n                     *      \"name\": \"Quotes\",\n                     *      \"id\": \"3000000003983\",\n                     *      \"href\": \"Contacts/{ENTITYID}/Quotes\",\n                     *      \"type\": \"default\"\n                     *    },\n                     *    {\n                     *      \"display_label\": \"Sales Orders\",\n                     *      \"visible\": true,\n                     *      \"api_name\": \"SalesOrders\",\n                     *      \"module\": {\n                     *        \"api_name\": \"Sales_Orders\",\n                     *        \"id\": \"3000000000105\"\n                     *      },\n                     *      \"name\": \"SalesOrders\",\n                     *      \"id\": \"3000000003986\",\n                     *      \"href\": \"Contacts/{ENTITYID}/SalesOrders\",\n                     *      \"type\": \"default\"\n                     *    },\n                     *    {\n                     *      \"display_label\": \"Purchase Orders\",\n                     *      \"visible\": true,\n                     *      \"api_name\": \"PurchaseOrders\",\n                     *      \"module\": {\n                     *        \"api_name\": \"Purchase_Orders\",\n                     *        \"id\": \"3000000000107\"\n                     *      },\n                     *      \"name\": \"PurchaseOrders\",\n                     *      \"id\": \"3000000003989\",\n                     *      \"href\": \"Contacts/{ENTITYID}/PurchaseOrders\",\n                     *      \"type\": \"default\"\n                     *    },\n                     *    {\n                     *      \"display_label\": \"Invoices\",\n                     *      \"visible\": true,\n                     *      \"api_name\": \"Invoices\",\n                     *      \"module\": {\n                     *        \"api_name\": \"Invoices\",\n                     *        \"id\": \"3000000000109\"\n                     *      },\n                     *      \"name\": \"Invoices\",\n                     *      \"id\": \"3000000003995\",\n                     *      \"href\": \"Contacts/{ENTITYID}/Invoices\",\n                     *      \"type\": \"default\"\n                     *    },\n                     *    {\n                     *      \"display_label\": \"Campaigns\",\n                     *      \"visible\": true,\n                     *      \"api_name\": \"Campaigns\",\n                     *      \"module\": {\n                     *        \"api_name\": \"Campaigns\",\n                     *        \"id\": \"3000000000055\"\n                     *      },\n                     *      \"name\": \"Campaigns\",\n                     *      \"id\": \"3000000003998\",\n                     *      \"href\": \"Contacts/{ENTITYID}/Campaigns\",\n                     *      \"type\": \"default\"\n                     *    },\n                     *    {\n                     *      \"display_label\": \"Social\",\n                     *      \"visible\": true,\n                     *      \"api_name\": \"Social\",\n                     *      \"module\": {\n                     *        \"api_name\": \"Social\",\n                     *        \"id\": \"3000000000087\"\n                     *      },\n                     *      \"name\": \"Social\",\n                     *      \"id\": \"3000000004067\",\n                     *      \"href\": null,\n                     *      \"type\": \"default\"\n                     *    }\n                     *  ]\n                     *}\n                     */\n                    getRelatedList: function (data) {\n                        data.type = 'RELATED_LIST'\n                        return getMeta(data)\n                    },\n\n                    /**\n                     * @function getCustomViews\n                     * @memberof ZOHO.CRM.META\n                     * @description get Custom Views of a module\n                     * @param {Object} config - Configuration Object.\n                     * @param {String} config.Entity - SysRefName of the module.\n                     * @param {String} [config.Id] - layout ID.\n                     * @returns {Promise} Resolved with data of Assignment rules matching with Entity\n                     * @example\n                     * ZOHO.CRM.META.getCustomViews({\"Entity\":\"Contacts\"}).then(function(data){\n                     * console.log(data);\n                     * });\n                     * //prints\n                     *{\n                     * \"categories\": [\n                     *   {\n                     *     \"display_value\": \"Created By Me\",\n                     *     \"actual_value\": \"created_by_me\"\n                     *   },\n                     *   {\n                     *     \"display_value\": \"Shared With Me\",\n                     *     \"actual_value\": \"shared_with_me\"\n                     *   }\n                     * ],\n                     * \"custom_views\": [\n                     *   {\n                     *     \"display_value\": \"All Contacts\",\n                     *     \"offline\": true,\n                     *     \"default\": true,\n                     *     \"system_name\": \"ALLVIEWS\",\n                     *     \"module\": {\n                     *       \"api_name\": \"Contacts\",\n                     *       \"id\": \"3000000000045\"\n                     *     },\n                     *     \"name\": \"All Contacts\",\n                     *     \"id\": \"3000000028135\",\n                     *     \"category\": \"shared_with_me\",\n                     *     \"favorite\": null\n                     *   },\n                     *   {\n                     *     \"display_value\": \"Mailing Labels\",\n                     *     \"offline\": true,\n                     *     \"default\": false,\n                     *     \"system_name\": \"ALLVIEWS\",\n                     *     \"module\": {\n                     *       \"api_name\": \"Contacts\",\n                     *       \"id\": \"3000000000045\"\n                     *     },\n                     *     \"name\": \"Mailing Labels\",\n                     *     \"id\": \"3000000028144\",\n                     *     \"category\": \"shared_with_me\",\n                     *     \"favorite\": null\n                     *   },\n                     *   {\n                     *     \"display_value\": \"My Contacts\",\n                     *     \"offline\": true,\n                     *     \"default\": false,\n                     *     \"system_name\": \"MYVIEWS\",\n                     *     \"module\": {\n                     *       \"api_name\": \"Contacts\",\n                     *       \"id\": \"3000000000045\"\n                     *     },\n                     *     \"name\": \"My Contacts\",\n                     *     \"id\": \"3000000028333\",\n                     *     \"category\": \"shared_with_me\",\n                     *     \"favorite\": null\n                     *   },\n                     *   {\n                     *     \"display_value\": \"New Last Week\",\n                     *     \"offline\": true,\n                     *     \"default\": false,\n                     *     \"system_name\": \"lastweek\",\n                     *     \"module\": {\n                     *       \"api_name\": \"Contacts\",\n                     *       \"id\": \"3000000000045\"\n                     *     },\n                     *     \"name\": \"New Last Week\",\n                     *     \"id\": \"3000000028183\",\n                     *     \"category\": \"shared_with_me\",\n                     *     \"favorite\": null\n                     *   },\n                     *   {\n                     *     \"display_value\": \"New This Week\",\n                     *     \"offline\": true,\n                     *     \"default\": false,\n                     *     \"system_name\": \"thisweek\",\n                     *     \"module\": {\n                     *       \"api_name\": \"Contacts\",\n                     *       \"id\": \"3000000000045\"\n                     *     },\n                     *     \"name\": \"New This Week\",\n                     *     \"id\": \"3000000028171\",\n                     *     \"category\": \"shared_with_me\",\n                     *     \"favorite\": null\n                     *   },\n                     *   {\n                     *     \"display_value\": \"Recently Created Contacts\",\n                     *     \"offline\": true,\n                     *     \"default\": false,\n                     *     \"system_name\": \"RECENTLYCREATED\",\n                     *     \"module\": {\n                     *       \"api_name\": \"Contacts\",\n                     *       \"id\": \"3000000000045\"\n                     *     },\n                     *     \"name\": \"Recently Created Contacts\",\n                     *     \"id\": \"3000000028195\",\n                     *     \"category\": \"shared_with_me\",\n                     *     \"favorite\": null\n                     *   },\n                     *   {\n                     *     \"display_value\": \"Recently Modified Contacts\",\n                     *     \"offline\": true,\n                     *     \"default\": false,\n                     *     \"system_name\": \"RECENTLYMODIFIED\",\n                     *     \"module\": {\n                     *       \"api_name\": \"Contacts\",\n                     *       \"id\": \"3000000000045\"\n                     *     },\n                     *     \"name\": \"Recently Modified Contacts\",\n                     *     \"id\": \"3000000028207\",\n                     *     \"category\": \"shared_with_me\",\n                     *     \"favorite\": null\n                     *   },\n                     *   {\n                     *     \"display_value\": \"Unread Contacts\",\n                     *     \"offline\": true,\n                     *     \"default\": false,\n                     *     \"system_name\": \"UNREADVIEWS\",\n                     *     \"module\": {\n                     *       \"api_name\": \"Contacts\",\n                     *       \"id\": \"3000000000045\"\n                     *     },\n                     *     \"name\": \"Unread Contacts\",\n                     *     \"id\": \"3000000028156\",\n                     *     \"category\": \"shared_with_me\",\n                     *     \"favorite\": null\n                     *   }\n                     * ],\n                     * \"info\": {\n                     *   \"per_page\": 8,\n                     *   \"default\": \"3000000028135\",\n                     *   \"count\": 8,\n                     *   \"page\": 1,\n                     *   \"more_records\": false\n                     * }\n                     *}\n                     *@example\n                     *ZOHO.CRM.META.getCustomViews({\"Entity\":\"Contacts\",\"Id\":\"3000000028135\"}).then(function(data){\n                     *\tconsole.log(data);\n                     *});\n                     * //prints\n                     *{\n                     * \"categories\": [\n                     *   {\n                     *     \"display_value\": \"Created By Me\",\n                     *     \"actual_value\": \"created_by_me\"\n                     *   },\n                     *   {\n                     *     \"display_value\": \"Shared With Me\",\n                     *     \"actual_value\": \"shared_with_me\"\n                     *   }\n                     * ],\n                     * \"custom_views\": [\n                     *   {\n                     *     \"display_value\": \"All Contacts\",\n                     *     \"criteria\": null,\n                     *     \"system_name\": \"ALLVIEWS\",\n                     *     \"module\": {\n                     *       \"api_name\": \"Contacts\",\n                     *       \"id\": \"3000000000045\"\n                     *     },\n                     *     \"sort_by\": null,\n                     *     \"offline\": true,\n                     *     \"default\": true,\n                     *     \"name\": \"All Contacts\",\n                     *     \"id\": \"3000000028135\",\n                     *     \"category\": \"shared_with_me\",\n                     *     \"fields\": [\n                     *       {\n                     *         \"api_name\": \"Full_Name\",\n                     *         \"id\": \"3000000000681\"\n                     *       },\n                     *       {\n                     *         \"api_name\": \"Account_Name\",\n                     *         \"id\": \"3000000000683\"\n                     *       },\n                     *       {\n                     *         \"api_name\": \"Email\",\n                     *         \"id\": \"3000000000687\"\n                     *       },\n                     *       {\n                     *         \"api_name\": \"Phone\",\n                     *         \"id\": \"3000000000695\"\n                     *       },\n                     *       {\n                     *         \"api_name\": \"Owner\",\n                     *         \"id\": \"3000000000673\"\n                     *       }\n                     *     ],\n                     *     \"favorite\": null,\n                     *     \"sort_order\": null\n                     *   }\n                     * ]\n                     *}\n                     *\n                     */\n                    getCustomViews: function (data) {\n                        data.type = data.Id ? 'CUSTOM_VIEW' : 'CUSTOM_VIEWS'\n                        return getMeta(data)\n                    }\n                },\n                /**\n                 * @namespace ZOHO.CRM.API\n                 */\n                API: {\n                    /**\n                     * @function addNotes\n                     * @description Add Notes to a record\n                     * @param {Object} config - Configuration Object.\n                     * @param {String} config.Entity - SysRefName of the module.\n                     * @param {Long} config.RecordID - RecordID to associate the notes.\n                     * @param {String} config.Title - Notes Title.\n                     * @param {String} config.Content - Notes Content.\n                     * @returns {Promise} Resolved with notes creation status\n                     * @memberof ZOHO.CRM.API\n                     * @example\n                     * ZOHO.CRM.API.addNotes({Entity:\"Leads\",RecordID:\"1475615000000292033\",Title:\"Notes Title\",Content:\"TitleContent\"}).then(function(data){\n                     *  console.log(data);\n                     * });\n                     *\n                     * //prints\n                     *{\n                     *  \"data\": [\n                     *    {\n                     *      \"code\": \"SUCCESS\",\n                     *      \"details\": {\n                     *        \"Modified_Time\": \"2017-12-20T14:08:56+05:30\",\n                     *        \"Modified_By\": {\n                     *          \"name\": \"NareshTesting\",\n                     *          \"id\": \"1000000031157\"\n                     *        },\n                     *        \"Created_Time\": \"2017-12-20T14:08:56+05:30\",\n                     *        \"id\": \"1000000044101\",\n                     *        \"Created_By\": {\n                     *          \"name\": \"NareshTesting\",\n                     *          \"id\": \"1000000031157\"\n                     *        }\n                     *      },\n                     *      \"message\": \"record added\",\n                     *      \"status\": \"success\"\n                     *    }\n                     *  ]\n                     *}\n                     */\n                    addNotes: function (data) {\n                        const Entity = data.Entity\n                        const RelatedEntity = 'NOTES'\n                        const RecordID = data.RecordID\n                        const content = {\n                            data: [{\n                                Note_Title: data.Title,\n                                Note_Content: data.Content\n                            }]\n                        }\n                        return createRecord(Entity, content, RecordID, RelatedEntity)\n                    },\n                    addNotesAttachment: function (data) {\n                        const Entity = data.Entity\n                        const RecordID = data.RecordID\n                        const RelatedRecordID = data.RelatedRecordID\n                        const APIData = {\n                            Files: {\n                                FileName: File.Name,\n                                FileData: File.Content\n                            }\n                        }\n                        return updateNotes(Entity, RecordID, RelatedRecordID, APIData)\n                    },\n                    /**\n                     * @function insertRecord\n                     * @description Insert record to a modue\n                     * @param {Object} config - Configuration Object.\n                     * @param {String} config.Entity - SysRefName of the module.\n                     * @param {list} config.Trigger - The trigger input can be \"workflow\", \"approval\" or \"blueprint\". If the trigger is not mentioned, the workflows, approvals and blueprints related to the API will get executed. Enter the trigger value as [] to not execute the workflows\n                     * @param {Object} config.APIData - RecordID to associate the notes.\n                     * @return {Promise} Resolved with response data\n                     * @memberof ZOHO.CRM.API\n                     * @example\n                     * var recordData = {\n                     *         \"Company\": \"Zylker\",\n                     *         \"Last_Name\": \"Peterson\"\n                     *   }\n                     * ZOHO.CRM.API.insertRecord({Entity:\"Leads\",APIData:recordData,Trigger:[\"workflow\"]}).then(function(data){\n                     *\tconsole.log(data);\n                     *\t});\n                     * //prints\n                     *{\n                     *  \"data\": [\n                     *    {\n                     *      \"code\": \"SUCCESS\",\n                     *      \"details\": {\n                     *        \"Modified_Time\": \"2017-12-22T03:24:39+05:30\",\n                     *        \"Modified_By\": {\n                     *          \"name\": \"NareshTesting \",\n                     *          \"id\": \"3000000031045\"\n                     *        },\n                     *        \"Created_Time\": \"2017-12-22T03:24:39+05:30\",\n                     *        \"id\": \"3000000040011\",\n                     *        \"Created_By\": {\n                     *          \"name\": \"NareshTesting \",\n                     *          \"id\": \"3000000031045\"\n                     *        }\n                     *      },\n                     *      \"message\": \"record added\",\n                     *      \"status\": \"success\"\n                     *    }\n                     *  ]\n                     *}\n                     * @example\n                     * var data = [\n                     * {\n                     *         \"Company\": \"ZohoCorp\",\n                     *         \"Last_Name\": \"Babu\"\n                     * },\n                     * {\n                     * \t\"Company\": \"ZohoCorp\",\n                     *     \t\"Last_Name\": \"Naresh\"\n                     * }\n                     * ];\n                     * ZOHO.CRM.API.insertRecord({Entity:\"Leads\",APIData:data,Trigger:[\"workflow\"]}).then(function(data){\n                     * \tconsole.log(data);\n                     * });\n                     *\n                     * //prints\n                     *{\n                     *  \"data\": [\n                     *    {\n                     *      \"code\": \"SUCCESS\",\n                     *      \"details\": {\n                     *        \"Modified_Time\": \"2017-12-22T03:27:23+05:30\",\n                     *        \"Modified_By\": {\n                     *          \"name\": \"NareshTesting \",\n                     *          \"id\": \"3000000031045\"\n                     *        },\n                     *        \"Created_Time\": \"2017-12-22T03:27:23+05:30\",\n                     *        \"id\": \"3000000040015\",\n                     *        \"Created_By\": {\n                     *          \"name\": \"NareshTesting \",\n                     *          \"id\": \"3000000031045\"\n                     *        }\n                     *      },\n                     *      \"message\": \"record added\",\n                     *      \"status\": \"success\"\n                     *    },\n                     *    {\n                     *      \"code\": \"SUCCESS\",\n                     *      \"details\": {\n                     *        \"Modified_Time\": \"2017-12-22T03:27:23+05:30\",\n                     *        \"Modified_By\": {\n                     *          \"name\": \"NareshTesting \",\n                     *          \"id\": \"3000000031045\"\n                     *        },\n                     *        \"Created_Time\": \"2017-12-22T03:27:23+05:30\",\n                     *        \"id\": \"3000000040016\",\n                     *        \"Created_By\": {\n                     *          \"name\": \"NareshTesting \",\n                     *          \"id\": \"3000000031045\"\n                     *        }\n                     *      },\n                     *      \"message\": \"record added\",\n                     *      \"status\": \"success\"\n                     *    }\n                     *  ]\n                     *}\n                     */\n                    insertRecord: function (data) {\n                        const Entity = data.Entity\n                        const APIData = data.APIData\n                        APIData.trigger = data.Trigger\n                        return createRecord(Entity, APIData)\n                    },\n                    /**\n                     * @function upsertRecord\n                     * @description Insert record or update matching existing record\n                     * @param {Object} config - Configuration Object.\n                     * @param {String} config.Entity - SysRefName of the module.\n                     * @param {list} config.Trigger - The trigger input can be \"workflow\", \"approval\" or \"blueprint\". If the trigger is not mentioned, the workflows, approvals and blueprints related to the API will get executed. Enter the trigger value as [] to not execute the workflows\n                     * @param {Object} config.APIData - insert json details\n                     * @param {Object} config.duplicate_check_fields  - this param will update existing record,add multiple fields with comma separated\n                     * @return {Promise} Resolved with response data\n                     * @memberof ZOHO.CRM.API\n                     * @example\n                     *var data = [\n                     *{\n                     *        \"Company\": \"zoho\",\n                     *        \"Last_Name\": \"zylker\",\n                     *    \"Email\":\"zylker@gmail.com\",\n                     *    \"Mobile\":\"1234567890\",\n                     *    \"Website\":\"https://www.zoho.com\"\n                     *\n                     *},\n                     *{\n                     *  \"Company\": \"zoho\",\n                     *      \"Last_Name\": \"zylker\",\n                     *  \"Email\":\"zylkder@gmail.com\",\n                     *  \"Website\":\"http://www.google.com\",\n                     *  \"Mobile\":\"8393749473934739\"\n                     *},\n                     *];\n                     *ZOHO.CRM.API.upsertRecord({Entity:\"Leads\",APIData:data,duplicate_check_fields:[\"Website\",\"Mobile\"],Trigger : [\"workflow\"]}).then(function(data){\n                     *  console.log(data);\n                     *});\n                     *\n                     * //prints\n                     *[\n                     *  {\n                     *    \"code\": \"SUCCESS\",\n                     *    \"duplicate_field\": \"Mobile\",\n                     *    \"action\": \"update\",\n                     *    \"details\": {\n                     *      \"Modified_Time\": \"2018-10-11T12:06:47+05:30\",\n                     *      \"Modified_By\": {\n                     *        \"name\": \"test \",\n                     *        \"id\": \"111134000000033383\"\n                     *      },\n                     *      \"Created_Time\": \"2018-10-11T11:55:10+05:30\",\n                     *      \"id\": \"111134000000036225\",\n                     *      \"Created_By\": {\n                     *        \"name\": \"test \",\n                     *        \"id\": \"111134000000033383\"\n                     *      }\n                     *    },\n                     *    \"message\": \"record updated\",\n                     *    \"status\": \"success\"\n                     *  },\n                     *  {\n                     *    \"code\": \"SUCCESS\",\n                     *    \"duplicate_field\": \"Website\",\n                     *    \"action\": \"update\",\n                     *    \"details\": {\n                     *      \"Modified_Time\": \"2018-10-11T12:06:47+05:30\",\n                     *      \"Modified_By\": {\n                     *        \"name\": \"test \",\n                     *        \"id\": \"111134000000033383\"\n                     *      },\n                     *      \"Created_Time\": \"2018-10-11T11:55:10+05:30\",\n                     *      \"id\": \"111134000000036226\",\n                     *      \"Created_By\": {\n                     *        \"name\": \"test \",\n                     *        \"id\": \"111134000000033383\"\n                     *      }\n                     *    },\n                     *    \"message\": \"record updated\",\n                     *    \"status\": \"success\"\n                     *  }\n                     *]\n                     */\n                    upsertRecord: function (data) {\n                        const Entity = data.Entity\n                        const APIData = data.APIData\n                        APIData.trigger = data.Trigger\n                        APIData.action = 'UPSERT'\n                        if (data.duplicate_check_fields && data.duplicate_check_fields instanceof Array) {\n                            APIData.duplicate_check_fields = data.duplicate_check_fields.join(',')\n                        }\n                        return createRecord(Entity, APIData)\n                    },\n                    /**\n                     * @function getRecord\n                     * @description get all Details of a record\n                     * @param {Object} config - Configuration Object.\n                     * @param {String} config.Entity - SysRefName of the module.\n                     * @param {String} config.RecordID - RecordID to associate the notes.\n                     * @return {Promise} Resolved with data of record matching with RecordID\n                     * @memberof ZOHO.CRM.API\n                     * @example\n                     * ZOHO.CRM.API.getRecord({Entity:\"Leads\",RecordID:\"1000000030132\"})\n                     * .then(function(data){\n                     *     console.log(data)\n                     * })\n                     *\n                     * //prints\n                     *{\n                     *  \"data\": [\n                     *    {\n                     *      \"Owner\": {\n                     *        \"name\": \"NareshTesting \",\n                     *        \"id\": \"3000000031045\"\n                     *      },\n                     *      \"Company\": \"ZohoCorp\",\n                     *      \"Email\": null,\n                     *      \"Description\": null,\n                     *      \"$currency_symbol\": \"$\",\n                     *      \"$photo_id\": null,\n                     *      \"Website\": null,\n                     *      \"Twitter\": null,\n                     *      \"$upcoming_activity\": null,\n                     *      \"Salutation\": null,\n                     *      \"Last_Activity_Time\": \"2017-12-22T03:27:23+05:30\",\n                     *      \"First_Name\": null,\n                     *      \"Full_Name\": \"Naresh\",\n                     *      \"Lead_Status\": null,\n                     *      \"Industry\": null,\n                     *      \"Modified_By\": {\n                     *        \"name\": \"NareshTesting \",\n                     *        \"id\": \"3000000031045\"\n                     *      },\n                     *      \"Skype_ID\": null,\n                     *      \"$converted\": false,\n                     *      \"$process_flow\": false,\n                     *      \"Phone\": null,\n                     *      \"Street\": null,\n                     *      \"Zip_Code\": null,\n                     *      \"id\": \"3000000040016\",\n                     *      \"Email_Opt_Out\": false,\n                     *      \"$approved\": true,\n                     *      \"Designation\": null,\n                     *      \"$approval\": {\n                     *        \"delegate\": false,\n                     *        \"approve\": false,\n                     *        \"reject\": false\n                     *      },\n                     *      \"Modified_Time\": \"2017-12-22T03:27:23+05:30\",\n                     *      \"Created_Time\": \"2017-12-22T03:27:23+05:30\",\n                     *      \"$converted_detail\": {},\n                     *      \"$followed\": false,\n                     *      \"$editable\": true,\n                     *      \"City\": null,\n                     *      \"No_of_Employees\": 0,\n                     *      \"Mobile\": null,\n                     *      \"Last_Name\": \"Naresh\",\n                     *      \"State\": null,\n                     *      \"$status\": \"cv_1\",\n                     *      \"Lead_Source\": null,\n                     *      \"Country\": null,\n                     *      \"Created_By\": {\n                     *        \"name\": \"NareshTesting \",\n                     *        \"id\": \"3000000031045\"\n                     *      },\n                     *      \"Fax\": null,\n                     *      \"Annual_Revenue\": 0,\n                     *      \"Secondary_Email\": null\n                     *    }\n                     *  ]\n                     *}\n                     */\n                    getRecord: function (data) {\n                        const Entity = data.Entity\n                        const RecordID = data.RecordID\n                        return getRecord(Entity, RecordID)\n                    },\n                    /**\n                    * @function getBluePrint\n                    * @description Get blueprint details\n                    * @param {object} config - configuration object\n                    * @param {String} config.Entity - SysRefName of the module.\n                    * @param {String} config.RecordID - RecordID to associate the notes.\n                    * @return {Promise} Resolved with data of record matching with RecordID\n                    * @memberof ZOHO.CRM.API\n                    * @example\n                    * var config =\n                    *{\n                    *  \"Entity\": \"Leads\",\n                    *  \"RecordID\": \"111126000000036019\"\n                    *}\n                    *\n                    *\n                    *ZOHO.CRM.API.getBluePrint(config).then(function(data){\n                    *  console.log(data)\n                    *})\n                    *\n                    *\n                    * //prints\n                    *\n                    *\n                    *{\n                    *  \"blueprint\": {\n                    *    \"process_info\": {\n                    *      \"field_id\": \"111126000000000885\",\n                    *      \"is_continuous\": false,\n                    *      \"api_name\": \"Lead_Status\",\n                    *      \"continuous\": false,\n                    *      \"field_label\": \"Lead Status\",\n                    *      \"name\": \"Lprint\",\n                    *      \"column_name\": \"STATUS\",\n                    *      \"field_value\": \"Pre Qualified\",\n                    *      \"id\": \"111126000000035049\",\n                    *      \"field_name\": \"Lead Status\"\n                    *    },\n                    *    \"transitions\": [\n                    *      {\n                    *        \"next_transitions\": [\n                    *          {\n                    *            \"name\": \"lost lead\",\n                    *            \"id\": \"111126000000035025\"\n                    *          }\n                    *        ],\n                    *        \"data\": {},\n                    *        \"next_field_value\": \"Not Qualified\",\n                    *        \"name\": \"not qualify\",\n                    *        \"criteria_matched\": true,\n                    *        \"id\": \"111126000000035019\",\n                    *        \"fields\": [],\n                    *        \"criteria_message\": null,\n                    *        \"percent_partial_save\": 0\n                    *      },\n                    *      {\n                    *        \"next_transitions\": [],\n                    *        \"data\": {},\n                    *        \"next_field_value\": \"Contacted\",\n                    *        \"name\": \"contact\",\n                    *        \"criteria_matched\": true,\n                    *        \"id\": \"111126000000035007\",\n                    *        \"fields\": [],\n                    *        \"criteria_message\": null,\n                    *        \"percent_partial_save\": 0\n                    *      }\n                    *    ]\n                    *  }\n                    *}\n                    */\n                    getBluePrint: function (data) {\n                        const APIData = {\n                            Entity: data.Entity,\n                            RecordID: data.RecordID,\n                            action: 'GET_BLUEPRINT_STATUS'\n                        }\n                        return getBluePrint(APIData)\n                    },\n                    /**\n                    * @function updateBluePrint\n                    * @description update blueprint details for particular record.\n                    * @param {Object} config - Configuration Object.\n                    * @param {String} config.Entity - SysRefName of the module.\n                    * @param {String} config.RecordID - RecordID to associate the notes.\n                    * @param {object} config.BlueprintData - blueprint data to update\n                    * @return {Promise} Resolved with data of record matching with RecordID\n                    * @memberof ZOHO.CRM.API\n                    * @example\n                    * var BlueprintData =\n                    *{\n                    *  \"blueprint\": [\n                    *    {\n                    *      \"transition_id\": \"111126000000035019\",\n                    *      \"data\": {\n                    *        \"Phone\": \"8940372937\",\n                    *        \"Notes\": \"Updated via blueprint\"\n                    *      }\n                    *    }\n                    *  ]\n                    *}\n                    *\n                    *\n                    * update attachment with blueprint\n                    *\n                    *\n                    * var BlueprintData =\n                    *{\n                    *  \"blueprint\": [\n                    *    {\n                    *      \"transition_id\": \"1000000031897\",\n                    *      \"data\": {\n                    *        \"Attachments\": {\n                    *          \"$file_id\": [\n                    *            \"59cf260313b6907ffc56957f4241bd94ba3e0b6aad53b50f8b38583a859d623a\",\n                    *            \"59cf260313b6907ffc56957f4241bd94ba3e0b6aad53b50f8b38583a859d624d\"\n                    *          ]\n                    *        }\n                    *      }\n                    *    }\n                    *  ]\n                    *}\n                    *\n                    * update link with blueprint\n                    *\n                    *\n                    *{\n                    *  \"blueprint\": [\n                    *    {\n                    *      \"transition_id\": \"2000000031536\",\n                    *      \"data\": {\n                    *        \"Attachments\": {\n                    *          \"$link_url\": \"facebook.com\"\n                    *        },\n                    *        \"Notes\": \"Dileep checking Notes outside\"\n                    *      }\n                    *    }\n                    *  ]\n                    *}\n                    *\n                    *\n                    *var config=\n                    *{\n                    *  Entity:\"Leads\",\n                    *  RecordID:\"111126000000036019\",\n                    *  BlueprintData:BlueprintData\n                    *}\n                    *\n                    *\n                    *ZOHO.CRM.API.updateBluePrint(config).then(function(data){\n                    *   console.log(data);\n                    *});\n                    *\n                    * //prints\n                    *\n                    * {\n                    *    \"code\": \"SUCCESS\",\n                    *    \"details\": {},\n                    *    \"message\": \"transition updated successfully\",\n                    *    \"status\": \"success\"\n                    * }\n                    */\n                    updateBluePrint: function (data) {\n                        const APIData = {\n                            Entity: data.Entity,\n                            RecordID: data.RecordID,\n                            BlueprintData: data.BlueprintData,\n                            action: 'UPDATE_BLUEPRINT_STATUS'\n                        }\n                        return getBluePrint(APIData)\n                    },\n                    /**\n                    *@function uploadFile\n                    *@description upload the files in to zoho server and return appname and id\n                    *@memberof ZOHO.CRM.API\n                    *@params {object} config - upload file details\n                    *@return {Promise} Resolved with data of file\n                    *@example\n                    *var file = $(\"#attachmentinput\")\n                    *var file = document.getElementById(\"attachmentinput\").files[0];\n                    *var fileType = file.type;\n                    *var config = {\n                    *    \"CONTENT_TYPE\": \"multipart\",\n                    *    \"PARTS\": [{\n                    *        \"headers\": {\n                    *            \"Content-Disposition\": \"file;\"\n                    *        },\n                    *        \"content\": \"__FILE__\"\n                    *    }],\n                    *    \"FILE\": {\n                    *        \"fileParam\": \"content\",\n                    *        \"file\": file\n                    *    }\n\n                    *}\n                    *\n                    *\n                    *ZOHO.CRM.API.uploadFile(config).then(function(data) {\n                    *    console.log(data);\n                    *})\n                    *\n                    *\n                    * //prints\n                    *\n                    *{\n                    *  \"data\": [\n                    *    {\n                    *      \"code\": \"SUCCESS\",\n                    *      \"details\": {\n                    *        \"name\": \"desk.png\",\n                    *        \"id\": \"b12bb1b005f171ac797b3773040438ba7da026eb056f272271d511e95581689b\"\n                    *      },\n                    *      \"message\": \"desk.png uploaded Succeessfully\",\n                    *      \"status\": \"success\"\n                    *    }\n                    *  ]\n                    *}\n                    */\n                    uploadFile: function (data) {\n                        return uploadFile(data)\n                    },\n                    /**\n                    *@function getFile\n                    *@memberof ZOHO.CRM.API\n                    *@description get file from file id\n                    *@params {object} config - file id\n                    *@return {Promise} Resolved with data of file binary string\n                    *@example\n                    *var config = {\n                    *    id:\"b12bb1b005f171ac797b3773040438ba7da026eb056f272271d511e95581689b\"\n                    *}\n                    *\n                    *\n                    *ZOHO.CRM.API.getFile(config);\n                    */\n                    getFile: function (data) {\n                        return getFile(data)\n                    },\n                    /**\n                     * @function getAllRecords\n                     * @description get list of all records in a module\n                     * @param {Object} config - Configuration Object.\n                     * @param {String} config.Entity - SysRefName of the module.\n                     * @param {String} [config.sort_order] - To sort records. allowed values {asc|desc}\n                     * @param {String} [config.converted] - To get the list of converted records\n                     * @param {String} [config.approved] - To get the list of approved records\n                     * @param {String} [config.page] - To get the list of records from the respective pages\n                     * @param {String} [config.per_page] - To get the list of records available per page\n                     * @return {Promise} Resolved with data of record matching with RecordID\n                     * @memberof ZOHO.CRM.API\n                     * @example\n                     * ZOHO.CRM.API.getAllRecords({Entity:\"Leads\",sort_order:\"asc\",per_page:2,page:1})\n                     *.then(function(data){\n                     *    console.log(data)\n                     *})\n                     *\n                     * //prints\n                     *{\n                     *  \"data\": [\n                     *    {\n                     *      \"Owner\": {\n                     *        \"name\": \"NareshTesting \",\n                     *        \"id\": \"3000000031045\"\n                     *      },\n                     *      \"Company\": \"Testrec1\",\n                     *      \"Email\": null,\n                     *      \"Description\": null,\n                     *      \"$currency_symbol\": \"$\",\n                     *      \"$photo_id\": null,\n                     *      \"Website\": null,\n                     *      \"Twitter\": null,\n                     *      \"$upcoming_activity\": null,\n                     *      \"Salutation\": null,\n                     *      \"Last_Activity_Time\": \"2017-12-16T09:54:37+05:30\",\n                     *      \"First_Name\": null,\n                     *      \"Full_Name\": \"Testrec1\",\n                     *      \"Lead_Status\": null,\n                     *      \"Industry\": null,\n                     *      \"Modified_By\": {\n                     *        \"name\": \"NareshTesting \",\n                     *        \"id\": \"3000000031045\"\n                     *      },\n                     *      \"Skype_ID\": null,\n                     *      \"$converted\": false,\n                     *      \"$process_flow\": false,\n                     *      \"Phone\": null,\n                     *      \"Street\": null,\n                     *      \"Zip_Code\": null,\n                     *      \"id\": \"3000000032009\",\n                     *      \"Email_Opt_Out\": false,\n                     *      \"$approved\": true,\n                     *      \"Designation\": null,\n                     *      \"$approval\": {\n                     *        \"delegate\": false,\n                     *        \"approve\": false,\n                     *        \"reject\": false\n                     *      },\n                     *      \"Modified_Time\": \"2017-12-16T09:54:37+05:30\",\n                     *      \"Created_Time\": \"2017-12-16T09:54:37+05:30\",\n                     *      \"$converted_detail\": {},\n                     *      \"$followed\": false,\n                     *      \"$editable\": true,\n                     *      \"City\": null,\n                     *      \"No_of_Employees\": null,\n                     *      \"Mobile\": null,\n                     *      \"Last_Name\": \"Testrec1\",\n                     *      \"State\": null,\n                     *      \"$status\": \"cv_1\",\n                     *      \"Lead_Source\": null,\n                     *      \"Country\": null,\n                     *      \"Created_By\": {\n                     *        \"name\": \"NareshTesting \",\n                     *        \"id\": \"3000000031045\"\n                     *      },\n                     *      \"Fax\": null,\n                     *      \"Annual_Revenue\": null,\n                     *      \"Secondary_Email\": null\n                     *    },\n                     *    {\n                     *      \"Owner\": {\n                     *        \"name\": \"NareshTesting \",\n                     *        \"id\": \"3000000031045\"\n                     *      },\n                     *      \"Company\": \"Testrec2\",\n                     *      \"Email\": null,\n                     *      \"Description\": null,\n                     *      \"$currency_symbol\": \"$\",\n                     *      \"$photo_id\": null,\n                     *      \"Website\": null,\n                     *      \"Twitter\": null,\n                     *      \"$upcoming_activity\": null,\n                     *      \"Salutation\": null,\n                     *      \"Last_Activity_Time\": \"2017-12-16T09:54:58+05:30\",\n                     *      \"First_Name\": null,\n                     *      \"Full_Name\": \"Testrec2\",\n                     *      \"Lead_Status\": null,\n                     *      \"Industry\": null,\n                     *      \"Modified_By\": {\n                     *        \"name\": \"NareshTesting \",\n                     *        \"id\": \"3000000031045\"\n                     *      },\n                     *      \"Skype_ID\": null,\n                     *      \"$converted\": false,\n                     *      \"$process_flow\": false,\n                     *      \"Phone\": null,\n                     *      \"Street\": null,\n                     *      \"Zip_Code\": null,\n                     *      \"id\": \"3000000032091\",\n                     *      \"Email_Opt_Out\": false,\n                     *      \"$approved\": true,\n                     *      \"Designation\": null,\n                     *      \"$approval\": {\n                     *        \"delegate\": false,\n                     *        \"approve\": false,\n                     *        \"reject\": false\n                     *      },\n                     *      \"Modified_Time\": \"2017-12-16T09:54:58+05:30\",\n                     *      \"Created_Time\": \"2017-12-16T09:54:58+05:30\",\n                     *      \"$converted_detail\": {},\n                     *      \"$followed\": false,\n                     *      \"$editable\": true,\n                     *      \"City\": null,\n                     *      \"No_of_Employees\": null,\n                     *      \"Mobile\": null,\n                     *      \"Last_Name\": \"Testrec2\",\n                     *      \"State\": null,\n                     *      \"$status\": \"c_1\",\n                     *      \"Lead_Source\": null,\n                     *      \"Country\": null,\n                     *      \"Created_By\": {\n                     *        \"name\": \"NareshTesting \",\n                     *        \"id\": \"3000000031045\"\n                     *      },\n                     *      \"Fax\": null,\n                     *      \"Annual_Revenue\": null,\n                     *      \"Secondary_Email\": null\n                     *    }\n                     *  ],\n                     *  \"info\": {\n                     *    \"per_page\": 2,\n                     *    \"count\": 2,\n                     *    \"page\": 1,\n                     *    \"more_records\": true\n                     *  }\n                     *}\n                     */\n                    getAllRecords: function (data) {\n                        return getAllRecords(data)\n                    },\n                    /**\n                     * @function updateRecord\n                     * @description To update a record in a module\n                     * @param {Object} config - Configuration Object.\n                     * @param {String} config.Entity - SysRefName of the module.\n                     * @param {list} config.Trigger - The trigger input can be \"workflow\", \"approval\" or \"blueprint\". If the trigger is not mentioned, the workflows, approvals and blueprints related to the API will get executed. Enter the trigger value as [] to not execute the workflows\n                     * @param {String} config.APIData - Update Record Data.\n                     * @return {Promise} Resolved with data of update Record Response\n                     * @memberof ZOHO.CRM.API\n                     * @example\n                     * var config={\n                     *   Entity:\"Leads\",\n                     *   APIData:{\n                     *         \"id\": \"1000000049031\",\n                     *         \"Company\": \"Zylker\",\n                     *         \"Last_Name\": \"Peterson\"\n                     *   },\n                     *   Trigger:[\"workflow\"]\n                     * }\n                     * ZOHO.CRM.API.updateRecord(config)\n                     * .then(function(data){\n                     *     console.log(data)\n                     * })\n                     *\n                     * //prints\n                     *{\n                     *  \"data\": [\n                     *    {\n                     *      \"code\": \"SUCCESS\",\n                     *      \"details\": {\n                     *        \"Modified_Time\": \"2017-12-22T03:29:57+05:30\",\n                     *        \"Modified_By\": {\n                     *          \"name\": \"NareshTesting \",\n                     *          \"id\": \"3000000031045\"\n                     *        },\n                     *        \"Created_Time\": \"2017-12-22T03:27:23+05:30\",\n                     *        \"id\": \"3000000040016\",\n                     *        \"Created_By\": {\n                     *          \"name\": \"NareshTesting \",\n                     *          \"id\": \"3000000031045\"\n                     *        }\n                     *      },\n                     *      \"message\": \"record updated\",\n                     *      \"status\": \"success\"\n                     *    }\n                     *  ]\n                     *}\n                     */\n                    updateRecord: function (data) {\n                        const Entity = data.Entity\n                        const APIData = data.APIData\n                        APIData.trigger = data.Trigger\n                        return updateRecord(Entity, APIData)\n                    },\n                    /**\n                     * @function deleteRecord\n                     * @description To delete a record from a module\n                     * @param {Object} config - Configuration Object.\n                     * @param {String} config.Entity - SysRefName of the module.\n                     * @param {String} config.RecordID - RecordID to associate the notes.\n                     * @return {Promise} Resolved with Response to update record\n                     * @memberof ZOHO.CRM.API\n                     * @example\n                     * ZOHO.CRM.API.deleteRecord({Entity:\"Leads\",RecordID: \"1000000049031\"})\n                     * .then(function(data){\n                     *     console.log(data)\n                     * })\n                     *\n                     * //prints\n                     *{\n                     *  \"data\": [\n                     *    {\n                     *      \"code\": \"SUCCESS\",\n                     *      \"details\": {\n                     *        \"id\": \"3000000040015\"\n                     *      },\n                     *      \"message\": \"record deleted\",\n                     *      \"status\": \"success\"\n                     *    }\n                     *  ]\n                     *}\n                     */\n                    deleteRecord: function (data) {\n                        const Entity = data.Entity\n                        const recordID = data.RecordID\n                        return deleteRecord(Entity, recordID)\n                    },\n                    /**\n                     * @function searchRecord\n                     * @description To retrieve the records that matches your search criteria\n                     * @param {object} config - Configuration Object\n                     * @param {String} config.Entity - SysRefName of module\n                     * @param {String} config.Type - Allowed values \"email|phone|word|criteria\"\n                     * @param {String} config.Query - query String\n                     * @param {boolean} config.delay - query String\n                     * @param {String} page - Pagination - Page number\n                     * @param {String} per_page - Pagination - per page limit\n                     * @return {Promise} Resolved with search result\n                     * @memberof ZOHO.CRM.API\n                     * @example\n                     * ZOHO.CRM.API.searchRecord({Entity:\"Leads\",Type:\"phone\",Query:\"123456789\",delay:false})\n                     * .then(function(data){\n                     *     console.log(data)\n                     * })\n                     * @example\n                     * ZOHO.CRM.API.searchRecord({Entity:\"Leads\",Type:\"email\",Query:\"test@zoho.com\"})\n                     * .then(function(data){\n                     *     console.log(data)\n                     * })\n                     * @example\n                     * ZOHO.CRM.API.searchRecord({Entity:\"Leads\",Type:\"word\",Query:\"ZohoCrop\"})\n                     * .then(function(data){\n                     *     console.log(data)\n                     * })\n                     * @example\n                     * ZOHO.CRM.API.searchRecord({Entity:\"Leads\",Type:\"criteria\",Query:\"(Company:equals:Zoho)\"})\n                     * .then(function(data){\n                     *     console.log(data)\n                     * })\n                     * @example\n                     * ZOHO.CRM.API.searchRecord({Entity:\"Leads\",Type:\"criteria\",Query:\"((Company:equals:Zoho)or(Company:equals:zylker))\"})\n                     * .then(function(data){\n                     *     console.log(data)\n                     * })\n                     */\n                    searchRecord: function (data) {\n                        const Entity = data.Entity\n                        const Type = data.Type\n                        const Query = data.Query\n                        const page = data.page\n                        const per_page = data.per_page\n                        const delay = data.delay\n                        return searchRecord(Entity, Type, Query, page, per_page, delay)\n                    },\n                    /**\n                    * @function getAllActions\n                    * @description We can view all the available actions that can be performed on a particular record.\n                    * @param {object} config - Configuration Object\n                    * @param {String} config.Entity - SysRefname of module\n                    * @param {String} config.RecordID - id of the particular record.\n                    * @return {Promise} Resolved List of actions be the specified module record.\n                    * @memberof ZOHO.CRM.API\n                    * @example\n                    * var config = {\n                    * \tEntity: \"Leads\",\n                    * \tRecordID : \"518440000000222778\"\n                    * }\n                    * ZOHO.CRM.API.getAllActions(config)\n                    * .then(function(data){\n                    *     console.log(data)\n                    * })\n                    * //prints\n                    *\n                    *{\n                    *  \"actions\": [\n                    *    {\n                    *      \"http_method\": \"GET\",\n                    *      \"name\": \"custom_links\",\n                    *      \"href\": \"/v2/Leads/111155000000036014/actions/custom_links\"\n                    *    },\n                    *    {\n                    *      \"http_method\": \"POST\",\n                    *      \"name\": \"change_owner\",\n                    *      \"href\": \"/v2/Leads/111155000000036014/actions/change_owner\"\n                    *    },\n                    *    {\n                    *      \"http_method\": \"POST\",\n                    *      \"name\": \"approvals\",\n                    *      \"href\": \"/v2/Leads/111155000000036014/actions/approvals\",\n                    *      \"params\": [\n                    *        {\n                    *          \"name\": \"action\",\n                    *          \"type\": \"text\",\n                    *          \"value\": [\n                    *            \"approve\",\n                    *            \"delegate\",\n                    *            \"reject\",\n                    *            \"resubmit\"\n                    *          ]\n                    *        },\n                    *        {\n                    *          \"name\": \"comments\",\n                    *          \"type\": \"text\"\n                    *        }\n                    *      ]\n                    *    }\n                    *  ]\n                    *}\n                    *\n                    *\n                    *\n                    *The above response is obtained if the record is waiting for the approval and if the caller has administrator access.\n                    *If the record has no valid approval pending or the record id is invalid, the following is the response obtained.\n                    *\n                    *\n                    *\n                    *{\n                    *  \"actions\": [\n                    *    {\n                    *      \"http_method\": \"GET\",\n                    *      \"name\": \"custom_links\",\n                    *      \"href\": \"/v2/Leads/111155000000036014/actions/custom_links\"\n                    *    },\n                    *    {\n                    *      \"http_method\": \"POST\",\n                    *      \"name\": \"change_owner\",\n                    *      \"href\": \"/v2/Leads/111155000000036014/actions/change_owner\"\n                    *    }\n                    *  ]\n                    *}\n                    *\n                    */\n                    getAllActions: function (data) {\n                        data.action = 'GET_ALL_ACTIONS'\n                        return getAllActions(data)\n                    },\n                    /**\n                    * @function getApprovalRecords\n                    * @description This method is called by the one who has to approve.If it is called by others, they will get 204 response.\n                    * <br><br><b>\"others_awaiting\"</b> gives the list of all approvals pending regardless of who has to approve it. Usually, Super Admin and administrator will be able to use this API whereas standard user will still get a 204 empty response.<br><br>\n                    * @param {object} config - configuration object\n                    * @param {string} config.type - Allowed values \"awaiting | others_awaiting\"\n                    * @return {Promise} Resolved List of records for waiting the approval.\n                    * @memberof ZOHO.CRM.API\n                    * @example\n                    *\n                    *Example 1\n                    *\n                    * ZOHO.CRM.API.getApprovalRecords()\n                    * .then(function(data){\n                    *     console.log(data)\n                    * })\n                    *\n                    *It returns the pending approval records of the current user\n                    *\n                    *\n                    *Example 2\n                    * var config = {type:\"others_awaiting\"}\n                    *\n                    *\n                    * ZOHO.CRM.API.getApprovalRecords(config)\n                    * .then(function(data){\n                    *     console.log(data)\n                    * })\n                    *\n                    *It returns the pending approval records which should be approve by other user.\n                    * //prints\n                    *\n                    *\n                    *\n                    *{\n                    *  \"data\": [\n                    *    {\n                    *      \"owner\": {\n                    *        \"phone\": null,\n                    *        \"name\": \"milestone2 \",\n                    *        \"mobile\": null,\n                    *        \"id\": \"111155000000032023\",\n                    *        \"email\": \"uk@zylker.com\"\n                    *      },\n                    *      \"initiated_time\": \"2018-07-16T10:16:54+05:30\",\n                    *      \"module\": \"Leads\",\n                    *      \"rule\": {\n                    *        \"name\": \"Name\",\n                    *        \"id\": \"111155000000036006\"\n                    *      },\n                    *      \"id\": \"111155000000036021\",\n                    *      \"type\": \"approval\",\n                    *      \"entity\": {\n                    *        \"name\": \"uk\",\n                    *        \"id\": \"111155000000036014\"\n                    *      },\n                    *      \"default_layout\": true,\n                    *      \"waiting_for\": {\n                    *        \"name\": \"uk \",\n                    *        \"id\": \"111155000000035012\"\n                    *      }\n                    *    }\n                    *  ],\n                    *  \"info\": {\n                    *    \"per_page\": 200,\n                    *    \"count\": 1,\n                    *    \"page\": 1,\n                    *    \"more_records\": false\n                    *  }\n                    *}\n                    *\n                    */\n                    getApprovalRecords: function (data) {\n                        const newdata = {}\n                        if (data) {\n                            data.action = 'GET_APPROVAL_RECORDS'\n                        } else {\n                            newdata.action = 'GET_APPROVAL_RECORDS'\n                            data = newdata\n                        }\n                        return getAllActions(data)\n                    },\n                    /**\n                    * @function getApprovalById\n                    * @description To get details of the particular approval.\n                    * @param {object} config - configuration object\n                    * @param {string} config.id - id of the approval\n                    * @return {Promise} Resolved details of the approval.\n                    * @memberof ZOHO.CRM.API\n                    * @example\n                    *var config = {\n                    *       id:\"518440000000222786\"\n                    *}\n                    *\n                    *\n                    *ZOHO.CRM.API.getApprovalById(config).then(function(d){\n                    *   console.log(d);\n                    *})\n                    *\n                    *\n                    *\n                    * //prints\n                    *\n                    *\n                    *\n                    *{\n                    *  \"data\": [\n                    *    {\n                    *      \"owner\": {\n                    *        \"phone\": null,\n                    *        \"name\": \"milestone2 \",\n                    *        \"mobile\": null,\n                    *        \"id\": \"111155000000032023\",\n                    *        \"history\": [],\n                    *        \"email\": \"uk@zylker.com\"\n                    *      },\n                    *      \"initiated_time\": \"2018-07-16T10:16:54+05:30\",\n                    *      \"criteria\": [\n                    *        {\n                    *          \"api_name\": \"Annual_Revenue\",\n                    *          \"field_label\": \"Annual Revenue\",\n                    *          \"value\": \"$1.00\"\n                    *        }\n                    *      ],\n                    *      \"module\": \"Leads\",\n                    *      \"rule\": {\n                    *        \"name\": \"Name\",\n                    *        \"id\": \"111155000000036006\"\n                    *      },\n                    *      \"id\": \"518440000000222786\",\n                    *      \"type\": \"approval\",\n                    *      \"entity\": {\n                    *        \"name\": \"uk\",\n                    *        \"id\": \"111155000000036014\"\n                    *      },\n                    *      \"default_layout\": true,\n                    *      \"waiting_for\": {\n                    *        \"name\": \"uk \",\n                    *        \"id\": \"111155000000035012\"\n                    *      }\n                    *    }\n                    *  ],\n                    *  \"info\": {\n                    *    \"per_page\": 200,\n                    *    \"count\": 1,\n                    *    \"page\": 1,\n                    *    \"more_records\": false\n                    *  }\n                    *}\n                    *\n                    */\n                    getApprovalById: function (data) {\n                        data.action = 'GET_APPROVALBYID'\n                        return getAllActions(data)\n                    },\n                    /**\n                    * @function getApprovalsHistory\n                    * @description View the history of records put up for approval\n                    * @return {Promise} Resolved List of records for waiting the approval.\n                    * @memberof ZOHO.CRM.API\n                    * @example\n                    *\n                    *ZOHO.CRM.API.getApprovalsHistory().then(function(data){\n                    *    console.log(data);\n                    *});\n                    *\n                    *\n                    * //prints\n                    *\n                    *\n                    *\n                    *{\n                    *  \"data\": [\n                    *    {\n                    *      \"audit_time\": \"2018-07-16T15:46:54+05:30\",\n                    *      \"done_by\": {\n                    *        \"name\": \"milestone2 \",\n                    *        \"id\": \"111155000000032023\"\n                    *      },\n                    *      \"module\": \"Leads\",\n                    *      \"record\": {\n                    *        \"name\": \"uk\",\n                    *        \"id\": \"111155000000036014\"\n                    *      },\n                    *      \"related_module\": null,\n                    *      \"action\": \"Submitted\",\n                    *      \"rule\": \"111155000000036006\",\n                    *      \"account\": null,\n                    *      \"related_name\": \"milestone2 \",\n                    *      \"territory\": null\n                    *    }\n                    *  ],\n                    *  \"info\": {\n                    *    \"per_page\": 200,\n                    *    \"count\": 1,\n                    *    \"page\": 1,\n                    *    \"more_records\": false\n                    *  }\n                    *}\n                    *\n                    *\n                    */\n                    getApprovalsHistory: function () {\n                        const data = {}\n                        data.action = 'GET_APPROVALS_HISTORY'\n                        return getAllActions(data)\n                    },\n                    /**\n                    * @function approveRecord\n                    * @description approve the record\n                    * @param {object} config - configuration object\n                    * @param {string} config.Entity - SysRefName of module\n                    * @param {string} config.RecordID - id of the record.\n                    * @param {string} config.actionType - type of action Allowed values  \"approve\" | \"delegate\" | \"resubmit\" | \"reject\"\n                    * @param {string} config.comments - comments (optional)\n                    * @param {string} config.user - only for delegate\n                    * @return {Promise} Resolved with the details of approval\n                    * @memberof ZOHO.CRM.API\n                    * @example\n                    *\n                    *\n                    * var config = {\n                    *   Entity:\"Leads\",\n                    *   RecordID:\"111155000000036014\",\n                    *   actionType:\"approve\"\n                    *}\n                    *\n                    *\n                    *\n                    *ZOHO.CRM.API.approveRecord(config).then(function(data){\n                    *    console.log(data);\n                    *});\n                    *\n                    *\n                    * //prints\n                    *\n                    *\n                    *{\n                    *  \"code\": \"SUCCESS\",\n                    *  \"details\": {\n                    *    \"id\": \"111155000000036014\"\n                    *  },\n                    *  \"message\": \"Record approved successfully\",\n                    *  \"status\": \"success\"\n                    *}\n                    *\n                    */\n                    approveRecord: function (data) {\n                        data.action = 'UPDATE_APPROVAL'\n                        return getAllActions(data)\n                    },\n                    /**\n                     * @function getAllUsers\n                     * @description To retrieve list of users in ZohoCRM\n                     * @param {object} config - Configuration Object\n                     * @param {String} config.Type - Allowed values \"AllUsers | ActiveUsers | DeactiveUsers | ConfirmedUsers | NotConfirmedUsers | DeletedUsers | ActiveConfirmedUsers | AdminUsers | ActiveConfirmedAdmins\"\n                     * @param {number} [config.page] - To get the list of users from the respective pages\n                     * @param {number} [config.per_page] - To get the list of users available per page\n                     * @return {Promise} Resolved List of users matching specified Type\n                     * @memberof ZOHO.CRM.API\n                     * @example\n                     * ZOHO.CRM.API.getAllUsers({Type:\"AllUsers\"})\n                     * .then(function(data){\n                     *     console.log(data)\n                     * })\n                     * //prints\n                     *{\n                     *  \"users\": [\n                     *    {\n                     *      \"confirm\": true,\n                     *      \"full_name\": \"NareshTesting \",\n                     *      \"role\": {\n                     *        \"name\": \"CEO\",\n                     *        \"id\": \"3000000029719\"\n                     *      },\n                     *      \"territories\": [],\n                     *      \"profile\": {\n                     *        \"name\": \"Administrator\",\n                     *        \"id\": \"3000000029725\"\n                     *      },\n                     *      \"last_name\": null,\n                     *      \"alias\": null,\n                     *      \"id\": \"3000000031045\",\n                     *      \"first_name\": \"NareshTesting\",\n                     *      \"email\": \"naresh.babu+dev2@zylker.com\",\n                     *      \"zuid\": \"5073288\",\n                     *      \"status\": \"active\"\n                     *    }\n                     *  ],\n                     *  \"info\": {\n                     *    \"per_page\": 200,\n                     *    \"count\": 1,\n                     *    \"page\": 1,\n                     *    \"more_records\": false\n                     *  }\n                     *}\n                     */\n                    getAllUsers: function (data) {\n                        const Type = data.Type\n                        const page = data.page\n                        const per_page = data.per_page\n                        return user({ Type: Type, page: page, per_page: per_page })\n                    },\n                    /**\n                     * @function getUser\n                     * @description To retrieve list of users in ZohoCRM\n                     * @param {object} config - Configuration Object\n                     * @param {String} config.ID - UserID\n                     * @return {Promise} Resolved user matching userID\n                     * @memberof ZOHO.CRM.API\n                     * @example\n                     * ZOHO.CRM.API.getUser({ID:\"3000000029719\"})\n                     * .then(function(data){\n                     *     console.log(data)\n                     * })\n                     * //prints\n                     *{\n                     *  \"users\": [\n                     *    {\n                     *      \"country\": null,\n                     *      \"role\": {\n                     *        \"name\": \"CEO\",\n                     *        \"id\": \"3000000029719\"\n                     *      },\n                     *      \"customize_info\": {\n                     *        \"notes_desc\": null,\n                     *        \"show_right_panel\": null,\n                     *        \"bc_view\": null,\n                     *        \"show_home\": false,\n                     *        \"show_detail_view\": true,\n                     *        \"unpin_recent_item\": null\n                     *      },\n                     *      \"city\": null,\n                     *      \"signature\": null,\n                     *      \"name_format\": \"Salutation,First Name,Last Name\",\n                     *      \"language\": \"en_US\",\n                     *      \"locale\": \"en_US\",\n                     *      \"personal_account\": true,\n                     *      \"ntc_notification_type\": [\n                     *        3000000020985,\n                     *        3000000020988,\n                     *        3000000020991,\n                     *        3000000020994,\n                     *        3000000020997,\n                     *        3000000021012,\n                     *        3000000021003,\n                     *        3000000021006,\n                     *        3000000021009,\n                     *        3000000021078,\n                     *        3000000021072,\n                     *        3000000021075,\n                     *        3000000021069,\n                     *        3000000021081,\n                     *        3000000021084,\n                     *        3000000021087\n                     *      ],\n                     *      \"default_tab_group\": \"0\",\n                     *      \"street\": null,\n                     *      \"alias\": null,\n                     *      \"theme\": {\n                     *        \"normal_tab\": {\n                     *          \"font_color\": \"#FFFFFF\",\n                     *          \"background\": \"#222222\"\n                     *        },\n                     *        \"selected_tab\": {\n                     *          \"font_color\": \"#FFFFFF\",\n                     *          \"background\": \"#222222\"\n                     *        },\n                     *        \"new_background\": null,\n                     *        \"background\": \"#F3F0EB\",\n                     *        \"screen\": \"fixed\",\n                     *        \"type\": \"default\"\n                     *      },\n                     *      \"id\": \"3000000031045\",\n                     *      \"state\": null,\n                     *      \"country_locale\": \"en_US\",\n                     *      \"fax\": null,\n                     *      \"first_name\": \"NareshTesting\",\n                     *      \"email\": \"naresh.babu+dev2@zylker.com\",\n                     *      \"telephony_enabled\": false,\n                     *      \"imap_status\": false,\n                     *      \"zip\": null,\n                     *      \"decimal_separator\": \"en_US\",\n                     *      \"website\": null,\n                     *      \"time_format\": \"hh:mm a\",\n                     *      \"profile\": {\n                     *        \"name\": \"Administrator\",\n                     *        \"id\": \"3000000029725\"\n                     *      },\n                     *      \"mobile\": null,\n                     *      \"last_name\": null,\n                     *      \"time_zone\": \"Asia/Kolkata\",\n                     *      \"zuid\": \"5073288\",\n                     *      \"confirm\": true,\n                     *      \"rtl_enabled\": false,\n                     *      \"full_name\": \"NareshTesting \",\n                     *      \"ezuid\": \"6ca2127e9d60c217\",\n                     *      \"territories\": [],\n                     *      \"phone\": null,\n                     *      \"dob\": null,\n                     *      \"date_format\": \"MM/dd/yyyy\",\n                     *      \"ntc_enabled\": true,\n                     *      \"status\": \"active\"\n                     *    }\n                     *  ]\n                     *}\n                     */\n                    getUser: function (data) {\n                        const ID = data.ID\n                        return user({ ID: ID })\n                    },\n                    /**\n                     * @function getRelatedRecords\n                     * @description To retrive related list records\n                     * @param {object} config - Configuration Object\n                     * @param {String} config.Entity - \tSysRefName of the module.\n                     * @param {String} config.RecordID - RecordID to associate the notes.\n                     * @param {String} config.RelatedListName - \tSysRefName of the relatedList.\n                     * @param {Number} [config.page] - To get the list of related records from the respective page.\n                     * @param {Number} [config.per_page] - To get the list of related records available per page.\n                     * @return {Promise} Resolved user matching userID\n                     * @memberof ZOHO.CRM.API\n                     * @example\n                     * ZOHO.CRM.API.getRelatedRecords({Entity:\"Leads\",RecordID:\"1000000030132\",RelatedList:\"Notes\",page:1,per_page:200})\n                     * .then(function(data){\n                     *     console.log(data)\n                     * })\n                     * //prints\n                     *\n                     *{\n                     *  \"data\": [\n                     *    {\n                     *      \"Owner\": {\n                     *        \"name\": \"NareshTesting \",\n                     *        \"id\": \"3000000031045\"\n                     *      },\n                     *      \"Modified_Time\": \"2017-12-22T03:58:20+05:30\",\n                     *      \"$attachments\": null,\n                     *      \"Created_Time\": \"2017-12-22T03:58:20+05:30\",\n                     *      \"Parent_Id\": {\n                     *        \"name\": \"Peterson\",\n                     *        \"id\": \"3000000040011\"\n                     *      },\n                     *      \"$editable\": true,\n                     *      \"$se_module\": \"Leads\",\n                     *      \"Modified_By\": {\n                     *        \"name\": \"NareshTesting \",\n                     *        \"id\": \"3000000031045\"\n                     *      },\n                     *      \"$size\": null,\n                     *      \"$voice_note\": false,\n                     *      \"$status\": null,\n                     *      \"id\": \"3000000040059\",\n                     *      \"Created_By\": {\n                     *        \"name\": \"NareshTesting \",\n                     *        \"id\": \"3000000031045\"\n                     *      },\n                     *      \"Note_Title\": null,\n                     *      \"Note_Content\": \"Notes2\"\n                     *    },\n                     *    {\n                     *      \"Owner\": {\n                     *        \"name\": \"NareshTesting \",\n                     *        \"id\": \"3000000031045\"\n                     *      },\n                     *      \"Modified_Time\": \"2017-12-22T03:58:16+05:30\",\n                     *      \"$attachments\": null,\n                     *      \"Created_Time\": \"2017-12-22T03:58:16+05:30\",\n                     *      \"Parent_Id\": {\n                     *        \"name\": \"Peterson\",\n                     *        \"id\": \"3000000040011\"\n                     *      },\n                     *      \"$editable\": true,\n                     *      \"$se_module\": \"Leads\",\n                     *      \"Modified_By\": {\n                     *        \"name\": \"NareshTesting \",\n                     *        \"id\": \"3000000031045\"\n                     *      },\n                     *      \"$size\": null,\n                     *      \"$voice_note\": false,\n                     *      \"$status\": null,\n                     *      \"id\": \"3000000040055\",\n                     *      \"Created_By\": {\n                     *        \"name\": \"NareshTesting \",\n                     *        \"id\": \"3000000031045\"\n                     *      },\n                     *      \"Note_Title\": null,\n                     *      \"Note_Content\": \"Notes1\"\n                     *    }\n                     *  ],\n                     *  \"info\": {\n                     *    \"per_page\": 200,\n                     *    \"count\": 2,\n                     *    \"page\": 1,\n                     *    \"more_records\": false\n                     *  }\n                     *}\n                     */\n                    getRelatedRecords: function (data) {\n                        return getRelatedRecord(data)\n                    },\n                    /**\n                     * @function updateRelatedRecords\n                     * @description To update the relation between the records\n                     * @param {object} config - Configuration Object\n                     * @param {String} config.Entity - \tSysRefName of the module.\n                     * @param {String} config.RecordID - RecordID to associate the notes.\n                     * @param {String} config.RelatedListName - \tSysRefName of the relatedList.\n                     * @param {String} config.RelatedRecordID - \tRelated Record ID\n                     * @param {String} config.APIData - \tData to be updated in the related record\n                     * @return {Promise} Resolved user matching userID\n                     * @memberof ZOHO.CRM.API\n                     * @example\n                     *  var APIData = {\n                     * \tDescription:\"Test description\"\n                     *  }\n                     *  ZOHO.CRM.API.updateRelatedRecords({Entity:\"Leads\",RecordID:\"1000000079113\",RelatedList:\"Campaigns\",RelatedRecordID:\"1000000080041\",APIData:APIData})\n                     *  .then(function(data){\n                     *      console.log(data)\n                     *  })\n                     * //prints\n                     *{\n                     *  \"data\":[\n                     *   {\n                     *     \"code\": \"SUCCESS\",\n                     *     \"details\": {\n                     *       \"id\": 1000000080041\n                     *     },\n                     *     \"message\": \"relation updated\",\n                     *     \"status\": \"success\"\n                     *   }\n                     * \t]\n                     * }\n                     */\n                    updateRelatedRecords: function (data) {\n                        const Entity = data.Entity\n                        const RecordID = data.RecordID\n                        const RelatedList = data.RelatedList\n                        const RelatedRecordID = data.RelatedRecordID\n                        const APIData = data.APIData\n                        return updateRelatedRecord(Entity, RecordID, RelatedList, RelatedRecordID, APIData)\n                    },\n                    /**\n                     * @function delinkRelatedRecord\n                     * @description To delink the relation between the records\n                     * @param {object} config - Configuration Object\n                     * @param {String} config.Entity - \tSysRefName of the module.\n                     * @param {String} config.RecordID - RecordID to associate the notes.\n                     * @param {String} config.RelatedListName - \tSysRefName of the relatedList.\n                     * @param {String} config.RelatedRecordID - \tRelated Record ID\n                     * @return {Promise} Resolved user matching userID\n                     * @memberof ZOHO.CRM.API\n                     * @example\n                     *  ZOHO.CRM.API.delinkRelatedRecord({Entity:\"Leads\",RecordID:\"1000000079113\",RelatedList:\"Campaigns\",RelatedRecordID:\"1000000080041\"})\n                     *  .then(function(data){\n                     *      console.log(data)\n                     *  })\n                     * //prints\n                     *{\n                     *  \"data\": [\n                     *    {\n                     *      \"code\": \"SUCCESS\",\n                     *      \"details\": {\n                     *        \"id\": \"3000000040055\"\n                     *      },\n                     *      \"message\": \"record deleted\",\n                     *      \"status\": \"success\"\n                     *    }\n                     *  ]\n                     *}\n                     */\n                    delinkRelatedRecord: function (data) {\n                        const Entity = data.Entity\n                        const RecordID = data.RecordID\n                        const RelatedList = data.RelatedList\n                        const RelatedRecordID = data.RelatedRecordID\n                        return deleteRelatedRecord(Entity, RecordID, RelatedList, RelatedRecordID)\n                    },\n                    /**\n                     * @function attachFile\n                     * @description To delink the relation between the records\n                     * @param {object} config - Configuration Object\n                     * @param {String} config.Entity - \tSysRefName of the module.\n                     * @param {String} config.RecordID - RecordID to associate the notes.\n                     * @param {object} config.File - \tFile Object\n                     * @param {String} config.File.Name - \tFile Name\n                     * @param {object} config.File.Content - \tFile Content\n                     * @return {Promise} Resolved user Upload acknowledgement\n                     * @memberof ZOHO.CRM.API\n                     * @example\n                     *\n                     * ZOHO.CRM.API.attachFile({Entity:\"Leads\",RecordID:\"1000000031092\",File:{Name:\"myFile.txt\",Content:blob}}).then(function(data){\n                     * \tconsole.log(data);\n                     * });\n                     * //prints\n                     *{\n                     *  \"data\": [\n                     *    {\n                     *      \"code\": \"SUCCESS\",\n                     *      \"details\": {\n                     *        \"Modified_Time\": \"2017-12-20T14:22:30+05:30\",\n                     *        \"Modified_By\": {\n                     *          \"name\": \"NareshTesting\",\n                     *          \"id\": \"1000000031157\"\n                     *        },\n                     *        \"Created_Time\": \"2017-12-20T14:22:30+05:30\",\n                     *        \"id\": \"1000000044106\",\n                     *        \"Created_By\": {\n                     *          \"name\": \"NareshTesting\",\n                     *          \"id\": \"1000000031157\"\n                     *        }\n                     *      },\n                     *      \"message\": \"attachment uploaded successfully\",\n                     *      \"status\": \"success\"\n                     *    }\n                     *  ]\n                     *}\n                     * */\n                    attachFile: function (data) {\n                        const Entity = data.Entity\n                        const RecordID = data.RecordID\n                        const File = data.File\n                        var data = {\n                            FileName: File.Name,\n                            FileData: File.Content\n                        }\n                        return createRecord(Entity, data, RecordID, 'ATTACHMENT')\n                    },\n                    /**\n                     * @function getAllProfiles\n                     * @memberof ZOHO.CRM.API\n                     * @description To get all the profiles in the app\n                     * @returns {Promise} Resolved with all the profiles present in the app\n                     * @example\n                     * ZOHO.CRM.API.getAllProfiles().then(function(data){\n                     * \tconsole.log(data);\n                     * });\n                     *\n                     * //prints\n                     *  {\n                     *    \"profiles\": [\n                     *     {\n                     *        \"created_time\": null,\n                     *        \"modified_time\": null,\n                     *        \"name\": \"Administrator\",\n                     *        \"modified_by\": null,\n                     *       \"description\": \"This profile will have all the permissions. Users with Administrator profile will be able to view and manage all the data within the organization *. *        account by default.\",\n                     *        \"id\": \"12000000029855\",\n                     *        \"category\": false,\n                     *        \"created_by\": null\n                     *      },\n                     *      {\n                     *        \"created_time\": null,\n                     *        \"modified_time\": null,\n                     *        \"name\": \"Standard\",\n                     *        \"modified_by\": null,\n                     *        \"description\": \"This profile will have all the permissions except administrative privileges.\",\n                     *        \"id\": \"12000000029858\",\n                     *        \"category\": false,\n                     *        \"created_by\": null\n                     *      },\n                     *      {\n                     *        \"created_time\": \"2018-02-05T14:20:38+05:30\",\n                     *        \"modified_time\": \"2018-02-05T17:44:58+05:30\",\n                     *        \"name\": \"TestUser\",\n                     *        \"modified_by\": {\n                     *          \"name\": \"Arun \",\n                     *          \"id\": \"12000000032013\"\n                     *        },\n                     *        \"description\": \"TestUser API\",\n                     *        \"id\": \"12000000033045\",\n                     *        \"category\": true,\n                     *        \"created_by\": {\n                     *          \"name\": \"Arun \",\n                     *          \"id\": \"12000000032013\"\n                     *        }\n                     *     }\n                     *    ]\n                     *  }\n                     *\n                     */\n                    getAllProfiles: function (data) {\n                        const category = 'PROFILES'\n                        const type = 'GET_ALL_PROFILES'\n                        return getAllProfiles(category, type)\n                    },\n                    /**\n                     * @function getProfile\n                     * @memberof ZOHO.CRM.API\n                     * @description To get a particular profile's details with ProfileID as input\n                     * @param {Object} config - Configuration Object.\n                     * @param {String} config.ID - ProfileID\n                     * @returns {Promise} Resolved with the details of the profile for the given ProfileID\n                     * @example\n                     * ZOHO.CRM.API.getProfile({ID:\"12000000029858\"}).then(function(data){\n                     * \tconsole.log(data);\n                     * });\n                     *\n                     * //prints\n                     * {\n                     *\t\"profiles\": [{\n                     *\t\t\"created_time\": null,\n                     *\t\t\"modified_time\": null,\n                     *\t\t\"permissions_details\": [{\n                     *\t\t\t\t\"display_label\": \"Email Integration ( POP3 / IMAP )\",\n                     *\t\t\t\t\"module\": null,\n                     *\t\t\t\t\"name\": \"Crm_Implied_Zoho_Mail_Integ\",\n                     *\t\t\t\t\"id\": \"12000000030788\",\n                     *\t\t\t\t\"enabled\": true\n                     *\t\t\t},\n                     *\t\t\t{\n                     *\t\t\t\t\"display_label\": \"BCC Dropbox\",\n                     *\t\t\t\t\"module\": null,\n                     *\t\t\t\t\"name\": \"Crm_Implied_BCC_Dropbox\",\n                     *\t\t\t\t\"id\": \"12000000030752\",\n                     *\t\t\t\t\"enabled\": true\n                     *\t\t\t},\n                     *\t\t\t{\n                     *\t\t\t\t\"display_label\": \"Show Chat Bar\",\n                     *\t\t\t\t\"module\": null,\n                     *\t\t\t\t\"name\": \"Crm_Implied_Chat_Bar\",\n                     *\t\t\t\t\"id\": \"12000000030806\",\n                     *\t\t\t\t\"enabled\": true\n                     *\t\t\t},\n                     *\t\t\t{\n                     *\t\t\t\t\"display_label\": null,\n                     *\t\t\t\t\"module\": null,\n                     *\t\t\t\t\"name\": \"Crm_Implied_Social_Integration\",\n                     *\t\t\t\t\"id\": \"12000000030734\",\n                     *\t\t\t\t\"enabled\": false\n                     *\t\t\t}\n                     *\t\t],\n                     *\t\t\"name\": \"Standard\",\n                     *\t\t\"modified_by\": null,\n                     *\t\t\"description\": \"This profile will have all the permissions except administrative privileges.\",\n                     *\t\t\"id\": \"12000000029858\",\n                     *\t\t\"category\": false,\n                     *\t\t\"created_by\": null,\n                     *\t\t\"sections\": [{\n                     *\t\t\t\"name\": \"template\",\n                     *\t\t\t\"categories\": [{\n                     *\t\t\t\t\t\"display_label\": \"Email & Chat Settings\",\n                     *\t\t\t\t\t\"permissions_details\": [\n                     *\t\t\t\t\t\t\"12000000030788\",\n                     *\t\t\t\t\t\t\"12000000030752\",\n                     *\t\t\t\t\t\t\"12000000030806\"\n                     *\t\t\t\t\t],\n                     *\t\t\t\t\t\"name\": \"email_chat\"\n                     *\t\t\t\t},\n                     *\t\t\t\t{\n                     *\t\t\t\t\t\"display_label\": \"Manage Templates\",\n                     *\t\t\t\t\t\"permissions_details\": [\n                     *\t\t\t\t\t\t\"12000000029984\",\n                     *\t\t\t\t\t\t\"12000000029987\",\n                     *\t\t\t\t\t\t\"12000000030698\"\n                     *\t\t\t\t\t],\n                     *\t\t\t\t\t\"name\": \"template\"\n                     *\t\t\t\t}\n                     *\t\t\t]\n                     *\t\t}]\n                     *\t}]\n                     * }\n                     *\n                     */\n                    getProfile: function (data) {\n                        const category = 'PROFILES'\n                        const type = 'GET_PROFILE'\n                        const ID = data.ID\n                        return getProfile(category, type, ID)\n                    },\n                    /**\n                     * @function updateProfile\n                     * @memberof ZOHO.CRM.API\n                     * @description To update permissions for the given ProfileID\n                     * @param {Object} config - Configuration Object.\n                     * @param {String} config.ID - ProfileID\n                     * @param {Object} config.APIData - Permission Data (PermissionID : true | false)\n                     * @returns {Promise} Resolved with a response message (Success or failure ) after updating the permissions\n                     * @example\n                     * var permissionData = {\n                     *     \"profiles\": [\n                     *\t\t{\n                     * \t\t\t\t\"permissions_details\": [\n                     *\t\t\t\t{\n                     * \t\t\t\t\t\"id\": \"12000000030827\",\n                     *\t\t\t\t\t\"enabled\": false\n                     *\t\t\t\t},\n                     *\t\t\t\t{\n                     *\t\t\t\t\t\"id\": \"12000000029879\",\n                     *\t\t\t\t\t\"enabled\": true\n                     * \t\t\t\t}\n                     * \t\t\t]\n                     *\t\t}\n                     *\t]\n                     *}\n                     * ZOHO.CRM.API.updateProfile({ID:\"12000000033045\",APIData:permissionData}).then(function(data){\n                     * \tconsole.log(data);\n                     * });\n                     *\n                     * //prints\n                     * {\n                     *  \"profiles\": [\n                     *    {\n                     *      \"code\": \"SUCCESS\",\n                     *      \"details\": {},\n                     *      \"message\": \"profile updated successfully\",\n                     *      \"status\": \"success\"\n                     *    }\n                     *  ]\n                     * }\n                     *\n                     */\n                    updateProfile: function (data) {\n                        const category = 'UPDATE'\n                        const type = 'PROFILE'\n                        const ID = data.ID\n                        const APIData = data.APIData\n                        return updateProfile(category, type, ID, APIData)\n                    },\n                    /**\n                     * @function getOrgVariable\n                     * @memberof ZOHO.CRM.API\n                     * @description get plugins configuration data\n                     * @returns {Promise} Resolved with Plugin Configuration\n                     * @example\n                     * Example - 1:\n                     * ZOHO.CRM.API.getOrgVariable(\"variableNamespace\").then(function(data){\n                     * \tconsole.log(data);\n                     * });\n                     *\n                     * //prints\n                     *{\n                     *  \"Success\": {\n                     *   \"Content\": \"12345\"\n                     *  }\n                     *}\n                     *\n                     *\n                     *\n                     *  Example - 2:\n                     *\n                     * var data = {apiKeys:[\"key1\",\"key2\",\"ke3\"]};\n                     * ZOHO.CRM.API.getOrgVariable(data).then(function(data){\n                     *      console.log(data);\n                     * });\n                     *\n                     *\n                     *{\n                     *\"Success\":\n                     *{\n                     *   \"content\": {\n                     *      \"apikey\": {\n                     *         \"value\": \"BNMMNBVHJ\"\n                     *      },\n                     *      \"authtoken\": {\n                     *         \"value\": \"IUYTRERTYUI\"\n                     *      },\n                     *      \"apiscret\": {\n                     *         \"value\": \"848ksmduo389jd\"\n                     *      }\n                     *   }\n                     *}\n                     *}\n                     *\n                     *\n                     */\n                    getOrgVariable: function (nameSpace) {\n                        return config('VARIABLE', nameSpace)\n                    }\n                },\n                /**\n                 * @module ZOHO.CRM.UI\n                 */\n                UI: {\n                    /**\n                     * @namespace ZOHO.CRM.UI\n                     */\n                    /**\n                     * @function Resize\n                     * @description Resize Widget to the given dimensions\n                     * @param {Object} dimensions - Dimension of Dialer.\n                     * @param {Integer} dimensions.height - Height in px\n                     * @param {Integer} dimensions.width - Width in px\n                     * @returns {Promise} resolved with true | false\n                     * @memberof ZOHO.CRM.UI\n                     * @example\n                     * ZOHO.CRM.UI.Resize({height:\"200\",width:\"1000\"}).then(function(data){\n                     * \tconsole.log(data);\n                     * });\n                     *\n                     * //prints\n                     * True\n                     *\n                     */\n                    Resize: function (data) {\n                        var data = {\n                            action: 'RESIZE',\n                            data: {\n                                width: data.width,\n                                height: data.height\n                            }\n                        }\n                        return manipulateUI(data)\n                    },\n                    /**\n                     * @namespace ZOHO.CRM.UI.Dialer\n                     */\n                    Dialer: {\n                        /**\n                         * @function maximize\n                         * @description maximizes the CallCenter Window\n                         * @returns {Promise} resolved with true | false\n                         * @memberof ZOHO.CRM.UI.Dialer\n                         */\n                        maximize: function () {\n                            const data = {\n                                action: {\n                                    telephony: 'MAXIMIZE'\n                                }\n                            }\n                            return manipulateUI(data)\n                        },\n                        /**\n                         * @function minimize\n                         * @description minimize the CallCenter Window\n                         * @returns {Promise}  resolved with true | false\n                         * @memberof ZOHO.CRM.UI.Dialer\n                         */\n                        minimize: function () {\n                            const data = {\n                                action: {\n                                    telephony: 'MINIMIZE'\n                                }\n                            }\n                            return manipulateUI(data)\n                        },\n                        /**\n                         * @function notify\n                         * @description notify The user with an audible sound\n                         * @returns {Promise} resolved with true | false\n                         * @memberof ZOHO.CRM.UI.Dialer\n                         */\n                        notify: function () {\n                            const data = {\n                                action: {\n                                    telephony: 'NOTIFY'\n                                }\n                            }\n                            return manipulateUI(data)\n                        }\n                    },\n                    /**\n                     * @namespace ZOHO.CRM.UI.Record\n                     */\n                    Record: {\n                        /**\n                         * @function open\n                         * @description Open DetailPage of the specified Record\n                         * @param {object} data - Configuration Object\n                         * @param {String} data.Entity - \tSysRefName of the module.\n                         * @param {String} data.RecordID - RecordID to open\n                         * @returns {Promise} resolved with true | false\n                         * @memberof ZOHO.CRM.UI.Record\n                         * @example\n                         * ZOHO.CRM.UI.Record.open({Entity:\"Leads\",RecordID:\"1000000036062\"})\n                         * .then(function(data){\n                         *     console.log(data)\n                         * })\n                         */\n                        open: function (data) {\n                            /*\n                             * fetch TabName from sysrefName\n                             */\n                            var data = {\n                                action: {\n                                    record: 'OPEN'\n                                },\n                                data: {\n                                    Entity: data.Entity,\n                                    RecordID: data.RecordID,\n                                    target: data.Target\n                                }\n                            }\n                            return manipulateUI(data)\n                        },\n                        /**\n                         * @function edit\n                         * @description open EditPage of the specified Record\n                         * @param {object} data - Configuration Object\n                         * @param {String} data.Entity - \tSysRefName of the module.\n                         * @param {String} data.RecordID - RecordID to open\n                         * @returns {Promise} resolved with true | false\n                         * @memberof ZOHO.CRM.UI.Record\n                         * @example\n                         * ZOHO.CRM.UI.Record.edit({Entity:\"Leads\",RecordID:\"1000000036062\"})\n                         * .then(function(data){\n                         *     console.log(data)\n                         * })\n                         */\n                        edit: function (data) {\n                            /*\n                             * fetch TabName from sysrefName\n                             */\n                            var data = {\n                                action: {\n                                    record: 'EDIT'\n                                },\n                                data: {\n                                    Entity: data.Entity,\n                                    RecordID: data.RecordID,\n                                    target: data.Target\n                                }\n                            }\n                            return manipulateUI(data)\n                        },\n                        /**\n                         * @function create\n                         * @description Open CreatePage of the specified Record\n                         * @param {object} data - Configuration Object\n                         * @param {String} data.Entity - \tSysRefName of the module.\n                         * @returns {Promise} resolved with true | false\n                         * @memberof ZOHO.CRM.UI.Record\n                         * @example\n                         * ZOHO.CRM.UI.Record.create({Entity:\"Leads\"})\n                         * .then(function(data){\n                         *     console.log(data)\n                         * })\n                         */\n                        create: function (data) {\n                            /*\n                             * fetch TabName from sysrefName\n                             */\n                            var data = {\n                                action: {\n                                    record: 'CREATE'\n                                },\n                                data: {\n                                    Entity: data.Entity,\n                                    RecordID: data.RecordID,\n                                    target: data.Target\n                                }\n                            }\n                            return manipulateUI(data)\n                        },\n                        /**\n                         * @function populate\n                         * @description Populate the given data in the entity form\n                         * @param {object} RecordData\n                         * @returns {Promise} resolved with true | false\n                         * @memberof ZOHO.CRM.UI.Record\n                         * @example\n                         * ZOHO.CRM.UI.Record.populate({Annual_Revenue:\"500\",Description:\"Populating test data\",Phone:\"85663655785\"})\n                         * .then(function(data){\n                         *     console.log(data)\n                         * })\n                         */\n                        populate: function (recordData) {\n                            /*\n                             * fetch TabName from sysrefName\n                             */\n                            const data = {\n                                action: {\n                                    record: 'POPULATE'\n                                },\n                                data: recordData\n                            }\n                            return manipulateUI(data)\n                        }\n                    },\n                    /**\n                     * @namespace ZOHO.CRM.UI.Popup\n                     */\n                    Popup: {\n                        /**\n                         * @function close\n                         * @description Close Widget Popup\n                         * @returns {Promise} resolved with true | false\n                         * @memberof ZOHO.CRM.UI.Popup\n                         * @example\n                         * ZOHO.CRM.UI.Popup.close()\n                         * .then(function(data){\n                         *     console.log(data)\n                         * })\n                         */\n                        close: function () {\n                            /*\n                             * fetch TabName from sysrefName\n                             */\n                            const data = {\n                                action: {\n                                    popup: 'CLOSE'\n                                }\n                            }\n                            return manipulateUI(data)\n                        },\n                        /**\n                         * @function closeReload\n                         * @description Close Widget Popup and reload the View\n                         * @returns {Promise} resolved with true | false\n                         * @memberof ZOHO.CRM.UI.Popup\n                         * @example\n                         * ZOHO.CRM.UI.Popup.closeReload()\n                         * .then(function(data){\n                         *     console.log(data)\n                         * })\n                         */\n                        closeReload: function () {\n                            /*\n                             * fetch TabName from sysrefName\n                             */\n                            const data = {\n                                action: {\n                                    popup: 'CLOSE_RELOAD'\n                                }\n                            }\n                            return manipulateUI(data)\n                        }\n                    },\n                    /**\n                     * @namespace ZOHO.CRM.UI.Widget\n                     */\n                    Widget: {\n                        /**\n                         * @function open\n                         * @description open a WebTab Widget with custom onLoad Data\n                         * @returns {Promise} resolved with true | false\n                         * @memberof ZOHO.CRM.UI.Widget\n                         * @example\n                         * var message = {\n                         * \t\targ1:\"Argument 1\",\n                         * \t\targ2:\"Argument 2\",\n                         * \t\targ3Nested:{\n                         * \t\t\t\tsubArg1:\"SubArgument 1\",\n                         * \t\t\t\tsubArg2:\"SubArgument 2\",\n                         * \t\t\t\tsubArg3:\"SubArgument 3\",\n                         * \t\t\t}\n                         * }\n                         *\n                         * ZOHO.CRM.UI.Widget.open({Entity:\"WebTab1_Widget\",Message:message})\n                         * .then(function(data){\n                         *     console.log(data)\n                         * })\n                         */\n                        open: function (data) {\n                            /*\n                             * fetch TabName from sysrefName\n                             */\n                            var data = {\n                                action: {\n                                \twebTab: 'OPEN'\n                                },\n                                data: data\n                            }\n                            return manipulateUI(data)\n                        }\n                    }\n\n                },\n                /**\n                 * @namespace ZOHO.CRM.HTTP\n                 */\n                HTTP: {\n                    /**\n                     * @function get\n                     * @description Invoke  HTTP get\n                     * @returns {Promise} resolved with response of the initiated request\n                     * @memberof ZOHO.CRM.HTTP\n                     * @param {Object} request - Request Object\n                     * @param {Object} request.params - Request Params\n                     * @param {Object} request.headers - Request Headers\n                     * @example\n                     * var request ={\n                     * \turl : \"https://crm.zoho.com/crm/private/xml/Users/getUsers\",\n                     * \tparams:{\n                     * \t\tscope:\"crmapi\",\n                     * \t\ttype:\"AllUsers\"\n                     * \t},\n                     * \theaders:{\n                     *\t \tAuthorization:\"******************************\",\n                     * \t}\n                     * }\n                     * ZOHO.CRM.HTTP.get(request)\n                     * .then(function(data){\n                     *     console.log(data)\n                     * })\n                     *\n                     * //Prints\n                     * {\n                     *   \"users\": {\n                     *     \"user\": [\n                     *       {\n                     *         \"zip\": \"null\",\n                     *         \"country\": \"null\",\n                     *         \"website\": \"null\",\n                     *         \"role\": \"Acquisition Manager\",\n                     *         \"city\": \"null\",\n                     *         \"timezone\": \"Asia\\/Calcutta\",\n                     *         \"profile\": \"Administrator\",\n                     *         \"mobile\": \"null\",\n                     *         \"language\": \"en_US\",\n                     *         \"content\": \"Patricia Boyle\",\n                     *         \"zuid\": \"51857638\",\n                     *         \"confirm\": \"true\",\n                     *         \"phone\": \"null\",\n                     *         \"street\": \"null\",\n                     *         \"id\": \"1475615000000083003\",\n                     *         \"state\": \"null\",\n                     *         \"fax\": \"null\",\n                     *         \"email\": \"naresh.babu+demo1@zylker.com\",\n                     *         \"status\": \"active\"\n                     *       },\n                     *       {\n                     *         \"zip\": \"null\",\n                     *         \"country\": \"null\",\n                     *         \"website\": \"null\",\n                     *         \"role\": \"Standard\",\n                     *         \"city\": \"null\",\n                     *         \"timezone\": \"Asia\\/Calcutta\",\n                     *         \"profile\": \"testProfile\",\n                     *         \"mobile\": \"null\",\n                     *         \"language\": \"en_US\",\n                     *         \"content\": \"Naresh Babu\",\n                     *         \"zuid\": \"61712147\",\n                     *         \"confirm\": \"true\",\n                     *         \"phone\": \"null\",\n                     *         \"street\": \"null\",\n                     *         \"id\": \"1475615000000185001\",\n                     *         \"state\": \"null\",\n                     *         \"fax\": \"null\",\n                     *         \"email\": \"naresh.babu+demo2@zylker.com\",\n                     *         \"status\": \"active\"\n                     *       }\n                     *     ]\n                     *   }\n                     * }\n                     */\n                    get: function (data) {\n                        return remoteCall(HTTPRequest.GET, data)\n                    },\n                    /**\n                     * @function post\n                     * @description Invoke HTTP post\n                     * @returns {Promise} resolved with response of the initiated request\n                     * @memberof ZOHO.CRM.HTTP\n                     * @param {Object} request - Request Object\n                     * @param {Object} request.params - Request Params\n                     * @param {Object} request.headers - Request Headers\n                     * @param {Object} request.body - Request Body\n                     * @example\n                     * var data ='<Contacts><row no=\"1\"><FL val=\"First Name\">Amy</FL><FL val=\"Last Name\">Dawson</FL><FL val=\"Email\">testing@testing.com</FL><FL val=\"Title\">Manager</FL><FL val=\"Phone\">1234567890</FL><FL val=\"Mobile\">292827622</FL><FL val=\"Account Name\"> <![CDATA[\"A & A\"]]> </FL></row></Contacts>';\n                     * var request ={\n                     * \t\turl : \"https://crm.zoho.com/crm/private/xml/CustomModule1/insertRecords\",\n                     * \t\tparams:{\n                     * \t\t\tscope:\"crmapi\",\n                     * \t\t\txmlData:data\n                     * \t\t},\n                     * \t\theaders:{\n                     * \t \t\tAuthorization:\"******************************\",\n                     * \t\t}\n                     * }\n                     * ZOHO.CRM.HTTP.post(request)\n                     * .then(function(data){\n                     *     console.log(data)\n                     * })\n                     *\n                     * //Prints\n                     *<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t\t\t\t *<response uri=\"/crm/private/xml/Contacts/insertRecords\">\n\t\t\t\t\t *  <result>\n\t\t\t\t\t *    <message>Record(s) added successfully</message>\n\t\t\t\t\t *    <recorddetail>\n\t\t\t\t \t *      <FL val=\"Id\">457154000000952001</FL>\n\t\t\t\t\t *      <FL val=\"Created Time\">2018-10-24 13:55:56</FL>\n\t\t\t\t\t *      <FL val=\"Modified Time\">2018-10-24 13:55:56</FL>\n\t\t\t\t\t *      <FL val=\"Created By\"><![CDATA[NareshAutomation]]></FL>\n\t\t\t\t\t *      <FL val=\"Modified By\"><![CDATA[NareshAutomation]]></FL>\n\t\t\t\t\t *    </recorddetail>\n\t\t\t\t\t *  </result>\n\t\t\t\t\t *</response>\n                     */\n                    post: function (data) {\n                        return remoteCall(HTTPRequest.POST, data)\n                    },\n                    /**\n                     * @function put\n                     * @description Invoke HTTP put\n                     * @returns {Promise} resolved with response of the initiated request\n                     * @memberof ZOHO.CRM.HTTP\n                     * @param {Object} request - Request Object\n                     * @param {Object} request.params - Request Params\n                     * @param {Object} request.headers - Request Headers\n                     * @param {Object} request.body - Request Body\n                     * @example\n                     * var apidata =[\n                     *{\n                     *\t\"Last_Name\":\"testupdate\",\n                     *\tid:\"457154000000952001\"\n                     *}\n                     *]\n                     *\n                     *\n                     * var request ={\n                     *      url : \"https://crm.zoho.com/crm/v2/Contacts\",\n                     *      headers:{\n                     *          Authorization:\"******************************\",\n                     *      },\n                     *      body:{data:apidata}\n                     * }\n                     * ZOHO.CRM.HTTP.put(request)\n                     * .then(function(data){\n                     *     console.log(data)\n                     * })\n                     *\n                     * //Prints\n                     *{\n\t\t\t\t\t *  \"data\": [\n\t\t\t\t\t *    {\n\t\t\t\t\t *      \"code\": \"SUCCESS\",\n\t\t\t\t\t *      \"details\": {\n\t\t\t\t\t *        \"Modified_Time\": \"2018-10-24T14:08:57+05:30\",\n\t\t\t\t\t *        \"Modified_By\": {\n\t\t\t\t\t *          \"name\": \"NareshAutomation\",\n\t\t\t\t\t *          \"id\": \"457154000000148011\"\n\t\t\t\t\t *        },\n\t\t\t\t\t *        \"Created_Time\": \"2018-10-24T13:55:56+05:30\",\n\t\t\t\t\t *        \"id\": \"457154000000952001\",\n\t\t\t\t\t *        \"Created_By\": {\n\t\t\t\t\t *          \"name\": \"NareshAutomation\",\n\t\t\t\t\t *          \"id\": \"457154000000148011\"\n\t\t\t\t\t *        }\n\t\t\t\t\t *      },\n\t\t\t\t\t *      \"message\": \"record updated\",\n\t\t\t\t\t *      \"status\": \"success\"\n\t\t\t\t\t *    }\n\t\t\t\t\t *  ]\n\t\t\t\t\t *}\n                     */\n                    put: function (data) {\n                        return remoteCall(HTTPRequest.PUT, data)\n                    },\n                    /**\n                     * @function patch\n                     * @description Invoke HTTP patch\n                     * @returns {Promise} resolved with response of the initiated request\n                     * @memberof ZOHO.CRM.HTTP\n                     * @param {Object} request - Request Object\n                     * @param {Object} request.params - Request Params\n                     * @param {Object} request.headers - Request Headers\n                     * @param {Object} request.body - Request Body\n                     * @example\n                     * var data ={\n                     * name:\"name\",\n                     * age:\"23\"\n                     * };\n                     * var request ={\n                     *      url : \"https://www.example.com/patch\",\n                     *      params:{\n                     *          scope:\"apiscope\",\n                     *      },\n                     *      headers:{\n                     *          Authorization:\"******************************\",\n                     *      },\n                     *      body:data\n                     * }\n                     * ZOHO.CRM.HTTP.patch(request)\n                     * .then(function(data){\n                     *     console.log(data)\n                     * })\n                     *\n                     * //Prints\n                     *\n                     *{\n\t\t\t\t\t *  \"args\": {},\n\t\t\t\t\t *  \"data\": \"\",\n\t\t\t\t\t *  \"files\": {},\n\t\t\t\t\t *  \"form\": {},\n\t\t\t\t\t *  \"headers\": {\n\t\t\t\t\t *    \"Accept\": \"application/json\",\n\t\t\t\t\t *    \"Accept-Language\": \"en-GB,en-US;q=0.9,en;q=0.8\",\n\t\t\t\t\t *    \"Content-Length\": \"0\"\n\t\t\t\t\t *  },\n\t\t\t\t\t *  \"json\": null,\n\t\t\t\t\t *  \"url\": \"https://www.example.com/patch\"\n\t\t\t\t\t *}\n                     *\n                     */\n                    patch: function (data) {\n                        return remoteCall(HTTPRequest.PATCH, data)\n                    },\n                    /**\n                     * @function delete\n                     * @description Invoke HTTP delete\n                     * @returns {Promise} resolved with response of the initiated request\n                     * @memberof ZOHO.CRM.HTTP\n                     * @param {Object} request - Request Object\n                     * @param {Object} request.params - Request Params\n                     * @param {Object} request.headers - Request Headers\n                     * @param {Object} request.body - Request Body\n                     * @example\n                     * var request ={\n                     *      url : \"https://crm.zoho.com/crm/v2/Leads/111158000000045188\",\n                     *      headers:{\n                     *          Authorization:\"******************************\",\n                     *      }\n                     * }\n                     * ZOHO.CRM.HTTP.delete(request)\n                     * .then(function(data){\n                     *     console.log(data)\n                     * })\n                     *\n                     * //Prints\n                     *\n                     *{\n                     *  \"data\": [\n                     *    {\n                     *      \"code\": \"SUCCESS\",\n                     *      \"details\": {\n                     *        \"id\": \"111158000000045188\"\n                     *      },\n                     *      \"message\": \"record deleted\",\n                     *      \"status\": \"success\"\n                     *    }\n                     *  ]\n                     *}\n                     *\n                     */\n                    delete: function (data) {\n                        return remoteCall(HTTPRequest.DELETE, data)\n                    }\n                },\n                /**\n                 * @namespace ZOHO.CRM.CONNECTOR\n                 */\n                CONNECTOR: {\n                    /**\n                     * @function invokeAPI\n                     * @description Invokes Connector API\n                     * @returns {Promise} resolved with response of the Connector API\n                     * @memberof ZOHO.CRM.CONNECTOR\n                     * @param {String} nameSpace - NameSpace of Connector API to invoke\n                     * @param {Object} data - Connector API Data\n                     * @param {Object} data.VARIABLES - Dynamic Data represented by placeholders in connectorAPI\n                     * @param {Object} data.CONTENT_TYPE - ContentType - multipart for multipart request\n                     * @param {Array} data.PARTS - For multipart request provide parts config here\n                     * @param {Object} data.FILE - To include a file in your multipart request\n                     * @example\n                     * var data =\t{\n                     * \t \"VARIABLES\":{\n                     *           \"apikey\" : \"*********\",\n                     *           \"First_Name\" : \"Naresh\",\n                     *           \"Last_Name\" : \"Babu\",\n                     *           \"email\" : \"naresh.babu@zylker.com\"\n                     *         }\n                     *     }\n                     * ZOHO.CRM.CONNECTOR.invokeAPI(\"MailChimp.sendSubscription\",data)\n                     * .then(function(data){\n                     *     console.log(data)\n                     * })\n                     * @example\n                     *\n                     * var data = {\n                     *     \"CONTENT_TYPE\":\"multipart\",\n                     *     \"PARTS\":[\n                     *               {\n                     *                   \"headers\": {\n                     *                       \"Content-Type\": \"application/json\"\n                     *                   },\n                     *                   \"content\": {\"mimeType\": \"application/vnd.google-apps.folder\", \"title\": \"NareshFolder\"\n                     *                   }\n                     *               }\n                     *             ]\n                     *   }\n                     *   ZOHO.CRM.CONNECTOR.invokeAPI(\"ex10.testconnector.uplaodfile\",data)\n                     *   .then(function(data){\n                     *       console.log(data)\n                     *   })\n                     * @example\n                     * var file = document.getElementById(\"File\").files[0];\n                     * var fileType;\n                     *   if (file.type === \"application/pdf\"){\n                     *     fileType = file.type;\n                     *   }\n                     *   else if(file.type === \"image/jpeg\"){\n                     *     fileType = file.type;\n                     *   }\n                     *   else if(file.type === \"text/plain\"){\n                     *     fileType = \"application/msword\";\n                     *   }\n                     *   else if(file.type === \"\"){\n                     *     fileType = \"application/msword\";\n                     *   }\n\n                     *   console.log(file);\n                     *   var data = {\n                     *     \"VARIABLES\":{\n                     *       \"pathFileName\" : \"/Zoho CRM/myFile/\"+file.name\n                     *     },\n                     *     \"CONTENT_TYPE\":\"multipart\",\n                     *     \"PARTS\":[\n                     *               {\n                     *                 \"headers\": {\n                     *                   \"Content-Type\": \"application/json\"\n                     *                 },\n                     *                 \"content\": {\"mimeType\": fileType,\"description\": \"TestFile to upload\", \"title\":file.name}\n                     *               },{\n                     *                 \"headers\": {\n                     *                   \"Content-Disposition\": \"file;\"\n                     *                 },\n                     *                 \"content\": \"__FILE__\"\n                     *               }\n                     *             ],\n                     *     \"FILE\":{\n                     *       \"fileParam\":\"content\",\n                     *       \"file\":file\n                     *     },\n                     *   }\n                     *   console.log(data);\n                     *   ZOHO.CRM.CONNECTOR.invokeAPI(\"ex10.testconnector.uplaodfile\",data)\n                     *   .then(function(data){\n                     *       console.log(data)\n                     *   })\n\n                     */\n                    invokeAPI: function (nameSpace, data) {\n                        return remoteCall(nameSpace, data, 'CONNECTOR_API')\n                    },\n                    /**\n                     * @function authorize\n                     * @description Prompts the Connector Authorize window\n                     * @returns {Promise} resolved with true on successful Authorization\n                     * @memberof ZOHO.CRM.CONNECTOR\n                     * @param {String} nameSpace - NameSpace of Connector to authorize\n                     * @example\n                     * var connectorName = \"zoho.authorize\";\n                     * ZOHO.CRM.CONNECTOR.authorize(connectorName);\n                     *\n                     */\n                    authorize: function (nameSpace) {\n                        return remoteCall(nameSpace, {}, 'CONNECTOR_AUTHORIZE')\n                    }\n                    /*\n                     * @function revokeConnector\n                     * @description revoke Connector\n                     * @returns {Promise} resolved with response of the Connector\n                     * @memberof ZOHO.CRM.CONNECTOR\n                     * @param {String} nameSpace - NameSpace of Connector to revoke\n                     * @example\n                     *   ZOHO.CRM.CONNECTOR.revokeConnector(\"zoho.accounts\")\n                     *   .then(function(data){\n                     *       console.log(data)\n                     *   })\n                     *\n                     * //prints\n                     *{\n                     *    \"RESULT\": \"success\"\n                     * }\n                     *revokeConnector: function(nameSpace) {\n                     *    return remoteCall(nameSpace, {}, \"CONNECTOR_REVOKE\");\n                     *}\n\t\t\t\t\t */\n                },\n                /**\n                 * @namespace ZOHO.CRM.CONNECTION\n                 */\n                CONNECTION: {\n                    /**\n                     * @function invoke\n                     * @description Invoke a Connection\n                     * @returns {Promise} resolved with response of the connection made\n                     * @memberof ZOHO.CRM.CONNECTION\n                     * @param {String} conn_name - Connection Name\n                     * @param {Object} req_data - Request Data\n                     * @example\n                     * var conn_name = \"mailchimp4\";\n                     * var req_data ={\n                     *   \"parameters\" : {\n                     *       \"param1\" : \"paramvalue1\",\n                     *       \"param2\" : \"paramvalue2\"\n                     *   },\n                     *   \"headers\" : {\n                     *       \"header1\" : \"headervalue1\",\n                     *       \"header2\" : \"headervalue2\"\n                     *   },\n                     *   \"method\" : \"POST\",\n                     *   \"url\" : \"http://mailchimp.api/sample_api\",\n                     *   \"param_type\" : 1\n                     * };\n                     * ZOHO.CRM.CONNECTION.invoke(conn_name, req_data)\n                     * .then(function(data){\n                     *     console.log(data)\n                     * })\n                     *\n                     * //Prints\n                     * {\n                     *   \"code\" : \"SUCCESS\",\n                     *   \"details\" : {\n                     *       \"CODE\" : 200,\n                     *       \"message\" : \"action completed successfully\",\n                     *       \"status\" : \"Success\"\n                     *    },\n                     *   \"message\" : \"Connection invoked successfully\",\n                     *   \"status\" : \"success\"\n                     *  }\n                     */\n                    invoke: function (conn_name, req_data) {\n                        const request = {}\n                        const reqObj = {}\n                        reqObj.url = req_data.url\n                        reqObj.method = req_data.method\n                        reqObj.param_type = req_data.param_type\n                        reqObj.parameters = JSON.stringify(req_data.parameters)\n                        reqObj.headers = JSON.stringify(req_data.headers)\n                        request.data = reqObj\n                        const data = {\n                            category: 'CRM_CONNECTION', // no i18n\n                            connectionName: conn_name,\n                            data: request\n                        }\n                        return newRequestPromise(data)\n                    }\n                }\n            }\n        })()\n    }\n})()","import React, { useState } from 'react'\nimport { ResultItemType } from '../types'\n\nconst pageSize = 10\n\ntype TableResultsType = {\n    results: ResultItemType[]\n}\n\nexport function TableResults ({ results }: TableResultsType) {\n    const [page, setPage] = useState(1)\n\n    function paginate (array: ResultItemType[], page_size: number, page_number: number) {\n        return array.slice((page_number - 1) * page_size, page_number * page_size)\n    }\n\n    if (results.length > 0) {\n        return (\n            <div style={{ padding: '10px 50px' }}>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Name</th>\n                            <th>Phone Number</th>\n                            <th>Availability</th>\n                            <th>Base Rate</th>\n                            <th>Distance</th>\n                            <th>Duration</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        { paginate(results, pageSize, page).map((item: ResultItemType, index: number) => {\n                            if (item.id) {\n                                return (\n                                    <tr key={`item.name-${item.id}`}>\n                                        <td>{(pageSize * (page - 1)) + (index + 1)}</td>\n                                        <td>{item.name}</td>\n                                        <td>{item.phoneNumber}</td>\n                                        <td>{item.Availability}</td>\n                                        <td>{item.Base_Rate}</td>\n                                        <td>{item.distance.text}</td>\n                                        <td>{item.duration.text}</td>\n                                    </tr>\n                                )\n                            }\n                            return null\n                        }) }\n                    </tbody>\n                </table>\n                <div style={{ marginBottom: 50 }}>\n                    { page > 1 && (\n                        <button style={{ marginRight: 10 }} onClick={() => setPage(page - 1)}>\n                            Previous\n                        </button>\n                    )}\n                    { !(page * pageSize >= results.length) && (\n                        <button onClick={() => setPage(page + 1)}>\n                            Next\n                        </button>\n                    ) }\n\n                </div>\n            </div>\n\n        )\n    }\n    return null\n}\n","import React, { ChangeEvent, MouseEvent, useState } from 'react'\nimport { SearchParametersType } from '../types'\n\ntype SearchWidgetProps = {\n    changeSearchParameters: (newParams: SearchParametersType) => void\n    searchParameters: SearchParametersType\n}\n\ntype StateType = {\n    Street: string\n    City: string\n    State: string\n    Zip: string\n}\n\nexport function SearchWidget ({ changeSearchParameters }: SearchWidgetProps) {\n    const [chosenSearchAddress, changeSearchAddress] = useState<StateType>({\n        Street: '7450 Cypress Gardens Blvd',\n        City: 'Winter Haven',\n        State: 'FL',\n        Zip: '33884'\n    })\n\n    return (\n        <form className=\"wrapper\">\n            <div className=\"row\">\n                <div className=\"searchInput\">\n                    <div>\n                        <label >\n                            Street Address\n                        </label>\n                    </div>\n                    <input\n                        className=\"inputField\"\n                        value={chosenSearchAddress.Street}\n                        required\n                        onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                            const newObj = {\n                                ...chosenSearchAddress,\n                                Street: e.target.value\n                            }\n                            changeSearchAddress(newObj)\n                        }}\n                    />\n                </div>\n                <div className=\"searchInput\">\n                    <div>\n                        <label >\n                            City\n                        </label>\n                    </div>\n                    <input\n                        className=\"inputField\"\n                        value={chosenSearchAddress.City}\n                        required\n                        onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                            const newObj = {\n                                ...chosenSearchAddress,\n                                City: e.target.value\n                            }\n                            changeSearchAddress(newObj)\n                        }}\n                    />\n                </div>\n                <div className=\"searchInput\">\n                    <div>\n                        <label >\n                            State\n                        </label>\n                    </div>\n                    <input\n                        className=\"inputField\"\n                        value={chosenSearchAddress.State}\n                        required\n                        maxLength={2}\n                        onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                            if (e.target.value.match('^[a-zA-Z ]*$')) {\n                                const newObj = {\n                                    ...chosenSearchAddress,\n                                    State: e.target.value.toUpperCase()\n                                }\n                                changeSearchAddress(newObj)\n                            }\n                        }}\n                    />\n                </div>\n                <div className=\"searchInput\">\n                    <div>\n                        <label >\n                           Zip\n                        </label>\n                    </div>\n                    <input\n                        className=\"inputField\"\n                        value={chosenSearchAddress.Zip}\n                        required\n                        onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                            const newObj = {\n                                ...chosenSearchAddress,\n                                Zip: e.target.value\n                            }\n                            changeSearchAddress(newObj)\n                        }}\n                    />\n                </div>\n                <div>\n                    <button onClick={(e: MouseEvent<HTMLButtonElement>) => {\n                        e.preventDefault()\n                        changeSearchParameters({\n                            searchAddress: chosenSearchAddress,\n                            readyForSearch: true\n                        })\n                    }}>Search\n                    </button>\n                </div>\n            </div>\n        </form>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport { compact, sortBy } from 'lodash'\nimport { DistanceMatrixService, LoadScript, GoogleMap, Marker } from '@react-google-maps/api'\nimport { AddressType, PositionType, ResultItemType, ResultsType } from '../types'\n\ntype MapProps = {\n    results: ResultsType\n    mapsApiKey: string\n    setResultsSortedByDistance: (T: ResultItemType[]) => void\n    resultsSortedByDistance: AddressType[] | null\n}\n\ntype MatrixType = {\n    status: string\n    duration: {\n        value: number\n        text: string\n    }\n    distance: {\n        value: number\n        text: string\n    }\n}\n\ntype DistanceMatrixType = {\n    origin_addresses: string[]\n    destination_addresses: string[]\n    rows: {\n        elements: MatrixType[]\n    }[]\n}\n\nexport function MapWidget ({ results, mapsApiKey, setResultsSortedByDistance, resultsSortedByDistance }: MapProps) {\n    const [centrePoint, setCentrePoint] = useState<PositionType>({\n        latitude: 27.9767,\n        longitude: -81.6489\n    })\n    const [destinations, setDestinations] = useState<string[] | null>(null)\n\n    useEffect(() => {\n        if (results.addressesToRender) {\n            const destinationsAddresses = results.addressesToRender.map((address) => address.address)\n            setDestinations(destinationsAddresses)\n        }\n    }, [results.addressesToRender])\n\n    useEffect(() => {\n        if (centrePoint) {\n            setCentrePoint(centrePoint)\n        }\n    }, [results.centrePoint])\n\n    const distanceMatrixCallback = (response: DistanceMatrixType) => {\n        if (destinations && response) {\n            const distance = response.rows[0].elements.map((item: MatrixType, index: number) => {\n                if (item.status === 'OK' && results.addressesToRender) {\n                    const data = {\n                        ...results.addressesToRender[index],\n                        distance: item.distance,\n                        duration: item.duration\n                    }\n                    return data\n                }\n                return null\n            })\n            const resultsSortedByDistance = sortBy(compact(distance), ['distance.value'])\n            setResultsSortedByDistance(resultsSortedByDistance)\n            setDestinations(null)\n        }\n    }\n\n    return (\n        <div style={{ padding: '10px 50px' }}>\n            <LoadScript googleMapsApiKey={mapsApiKey}>\n                <GoogleMap\n                    center={{\n                        lat: centrePoint.latitude,\n                        lng: centrePoint.longitude\n                    }}\n                    zoom={11}\n                    mapContainerStyle={{\n                        width: 'auto',\n                        height: '500px'\n                    }}\n                >\n                    { results.centrePoint && destinations && (\n                        <DistanceMatrixService\n                            options={{\n                                destinations,\n                                origins: [{ lng: results.centrePoint.longitude, lat: results.centrePoint.latitude }],\n                                travelMode: 'DRIVING',\n                                unitSystem: 1\n                            }}\n                            callback={distanceMatrixCallback}\n                        />\n                    )}\n                    { results.centrePoint && (\n                        <Marker\n                            position={{\n                                lat: results.centrePoint.latitude,\n                                lng: results.centrePoint.longitude\n                            }}\n                            label={'0'}\n                        >\n                            { resultsSortedByDistance && resultsSortedByDistance.map((item, index) => {\n                                const label = index + 1\n                                return (\n                                    <Marker\n                                        key={item.address}\n                                        position={{\n                                            lat: item.position.latitude,\n                                            lng: item.position.longitude\n                                        }}\n                                        label={label.toString()} />\n                                )\n                            })}\n                        </Marker>\n                    )}\n                </GoogleMap>\n            </LoadScript>\n        </div>\n    )\n}\n","import fetch from 'node-fetch'\nimport { orderByDistance } from 'geolib'\nimport { compact, filter } from 'lodash'\nimport states from './state_hash'\nimport { PositionType, SearchAddressType, SearchParametersType } from '../types'\nimport { ZOHO } from '../vendor/ZSDK'\n\ntype AddressGeocodeType = {\n    searchAddress: SearchAddressType\n    apiKey: string\n}\n\ntype RecordType = {\n    id: string\n    Availability: string\n    Base_Rate: number\n    Phone: string | null\n    Name: string\n    Street: string\n    City: string\n    State: string\n    Zip: string\n    Country: string\n    Latitude: string\n    Longitude: string\n}\n\nexport async function findMatchingProperties ({ searchAddress }: SearchParametersType) {\n    const response = await ZOHO.CRM.FUNCTIONS.execute('find_nearby_contacts', {\n        arguments: JSON.stringify({\n            search_address: searchAddress,\n            radius_km: 999.0\n        })\n    })\n\n    return response\n}\n\nexport async function getGoogleMapsApiKeyFromCRM () {\n    await ZOHO.embeddedApp.init()\n    const googleMapsAPIKey = await ZOHO.CRM.API.getOrgVariable('ethicaltechnology_google_maps_api_key')\n    if (Object.keys(googleMapsAPIKey).includes('Error')) {\n        alert(`Issue with google maps API organisation variable: ${googleMapsAPIKey.Error.Content}. Make sure you've added the key.`)\n    }\n    return googleMapsAPIKey.Success.Content\n}\n\nexport async function getRecords (page: number) {\n    await ZOHO.embeddedApp.init()\n    let pageNum = page\n    let more = true\n    const dataArr = []\n    while (more) {\n        const response = await ZOHO.CRM.API.getAllRecords({\n            Entity: 'Mold_Test_Inspector',\n            page: pageNum,\n            per_page: 200\n        })\n        console.log({ response })\n        const data = response.data.map((item: RecordType) => {\n            const { Availability, Base_Rate, Street, City, State, Zip, Latitude, Longitude } = item\n            if (Street && City && State && Latitude && Longitude) {\n                return {\n                    Availability,\n                    Base_Rate,\n                    Street,\n                    City,\n                    State,\n                    Zip,\n                    address: `${Street}, ${City}, ${State}${Zip ? `, ${Zip}` : ''}`,\n                    position: {\n                        latitude: parseFloat(Latitude),\n                        longitude: parseFloat(Longitude)\n                    },\n                    latitude: parseFloat(Latitude),\n                    longitude: parseFloat(Longitude),\n                    id: item.id,\n                    phoneNumber: item.Phone,\n                    name: item.Name\n                }\n            }\n        })\n        more = response.info.more_records\n        pageNum++\n        dataArr.push(...data)\n    }\n    return compact(dataArr)\n}\n\nexport async function filterRecordsByDistance (coordinates: PositionType, records: PositionType[]) {\n    const sortedRecordsByDistance = orderByDistance(\n        coordinates,\n        records\n    )\n    return sortedRecordsByDistance.slice(0, 25)\n}\n\nexport async function filterRecordsByState (state: keyof typeof states) {\n    const records = localStorage.getItem('cachedLeads')\n    const stateName = states[state]\n    if (records && stateName) {\n        const recordsParsed = JSON.parse(records)\n        const filteredRecords = filter(recordsParsed, (record: RecordType) => {\n            return record.State?.toLowerCase() === stateName?.toLowerCase() || record.State?.toLowerCase() === state?.toLowerCase()\n        })\n        return filteredRecords\n    } else {\n        alert(!stateName ? 'Invalid State!' : 'No records found!')\n    }\n}\n\nexport async function getAddressGeocode ({ searchAddress, apiKey }: AddressGeocodeType) {\n    const address = `${searchAddress.Street}, ${searchAddress.City}, ${searchAddress.State}${searchAddress.Zip ? `, ${searchAddress.Zip}` : ''}`\n    const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${address}&key=${apiKey}`\n    const res = await fetch(url)\n    const body = await res.json()\n    if (body.results.length > 0) {\n        const coordinates = {\n            latitude: body.results[0].geometry.location.lat,\n            longitude: body.results[0].geometry.location.lng\n        }\n        return {\n            coordinates,\n            status: 'Success'\n        }\n    }\n    return {\n        msg: 'Unable to fetch coordinates.',\n        status: 'Failed'\n    }\n}\n","import React, { useEffect, useState } from 'react'\nimport './App.css'\nimport { TableResults } from './components/TableResults'\nimport { SearchWidget } from './components/SearchWidget'\nimport { MapWidget } from './components/MapWidget'\nimport { filterRecordsByDistance, getGoogleMapsApiKeyFromCRM, getRecords, getAddressGeocode } from './services/crmDataFetcher'\nimport { ResultItemType, ResultsType } from './types'\n\nfunction renderResultsWidget (setResultsSortedByDistance: (T: ResultItemType[]) => void, resultsSortedByDistance: ResultItemType[], googleMapsApiKey?: string, results?: ResultsType) {\n    if (results && googleMapsApiKey) {\n        return (\n            <MapWidget\n                mapsApiKey={googleMapsApiKey}\n                results={results}\n                setResultsSortedByDistance={setResultsSortedByDistance}\n                resultsSortedByDistance={resultsSortedByDistance}\n            />\n        )\n    }\n}\n\nfunction App () {\n    const [searchParameters, changeSearchParameters] = useState({\n        searchAddress: {\n            Street: '7450 Cypress Gardens Blvd',\n            City: 'Winter Haven',\n            State: 'FL',\n            Zip: '33884'\n        },\n        readyForSearch: false\n    })\n    const [results, updateResults] = useState<ResultsType>({\n        addressesToRender: null,\n        centrePoint: null\n    })\n    const [googleMapsApiKey, updateGoogleMapsApiKey] = useState('')\n    const [resultsSortedByDistance, setResultsSortedByDistance] = useState<ResultItemType[]>([])\n\n    useEffect(() => {\n        const getRecordsAPI = async () => {\n            const records = await getRecords(1)\n            localStorage.setItem('cachedLeads', JSON.stringify(records))\n        }\n        void getRecordsAPI()\n    }, [])\n\n    useEffect(() => {\n        if (searchParameters.readyForSearch) {\n            const getDataFromCrm = async () => {\n                const geocode = await getAddressGeocode({\n                    searchAddress: searchParameters.searchAddress,\n                    apiKey: googleMapsApiKey\n                })\n                const records = localStorage.getItem('cachedLeads')\n                if (records && geocode.coordinates) {\n                    const parsedRecords = JSON.parse(records)\n                    results.centrePoint = {\n                        latitude: parseFloat(geocode.coordinates.latitude),\n                        longitude: parseFloat(geocode.coordinates.longitude)\n                    }\n                    const sortedByDistance: unknown = await filterRecordsByDistance(geocode.coordinates, parsedRecords)\n                    results.addressesToRender = sortedByDistance as ResultItemType[]\n                    updateResults(results)\n                } else {\n                    alert('Unable to get address coordinates.')\n                }\n                // const [filteredRecords, geocode] = await Promise.all([\n                //     filterRecordsByState(searchParameters.searchAddress.State as keyof typeof states),\n                //     getAddressGeocode({\n                //         searchAddress: searchParameters.searchAddress,\n                //         apiKey: googleMapsApiKey\n                //     })\n                // ])\n                // if (filteredRecords && geocode.coordinates) {\n                //     results.centrePoint = {\n                //         latitude: parseFloat(geocode.coordinates.latitude),\n                //         longitude: parseFloat(geocode.coordinates.longitude)\n                //     }\n                //     const sortedByDistance: unknown = await filterRecordsByDistance(geocode.coordinates, filteredRecords)\n                //     results.addressesToRender = sortedByDistance as ResultItemType[]\n                //     updateResults(results)\n                // } else {\n                //     alert('Unable to get address coordinates.')\n                // }\n            }\n            void getDataFromCrm()\n        }\n    }, [searchParameters])\n\n    useEffect(() => {\n        const getMapsApiKeyFromCRM = async () => {\n            const apiKey = await getGoogleMapsApiKeyFromCRM()\n            updateGoogleMapsApiKey(apiKey)\n        }\n        void getMapsApiKeyFromCRM()\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <SearchWidget changeSearchParameters={changeSearchParameters} searchParameters={searchParameters} />\n            {renderResultsWidget(setResultsSortedByDistance, resultsSortedByDistance, googleMapsApiKey, results)}\n            <TableResults results={resultsSortedByDistance} />\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}